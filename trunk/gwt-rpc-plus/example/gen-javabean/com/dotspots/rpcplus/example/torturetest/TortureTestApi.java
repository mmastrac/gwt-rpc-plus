/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dotspots.rpcplus.example.torturetest;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;

import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;

public class TortureTestApi {

  public interface Iface {

    public String testPassthru(String arg) throws TException;

    public String testThrowsAnException() throws SimpleException, TException;

    public String testThrowsAnUnpositionedException() throws SimpleException, TException;

    public String testDeclaresAnException() throws SimpleException, TException;

    public String testThrowsTwoExceptions(int which) throws SimpleException, MoreComplexException, TException;

    public SimpleException testExceptionPassthru(SimpleException ex) throws TException;

    public String testPositionalArguments(int int32, String str) throws TException;

    public Set<String> testSetString() throws TException;

    public Set<Integer> testSetInt() throws TException;

    public Map<String,String> testMapStringString() throws TException;

    public ObjectThatReferencesAnother methodReturningAnObject() throws TException;

    public SimpleObjectWithFieldIds methodReturningAnObject2() throws TException;

    public SimpleObjectWithNoFieldIds methodReturningAnObject3() throws TException;

    public ObjectWithComplexTypes methodReturningAnObject4() throws TException;

    public ObjectWithEnum methodReturningAnObject5(ObjectWithEnum arg) throws TException;

    public byte[] testBinary(byte[] binaryValue) throws TException;

    public void __setContext(ContextIn context) throws TException;

    public ContextOut __getContext() throws TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String testPassthru(String arg) throws TException
    {
      send_testPassthru(arg);
      return recv_testPassthru();
    }

    public void send_testPassthru(String arg) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testPassthru", TMessageType.CALL, seqid_));
      testPassthru_args args = new testPassthru_args();
      args.arg = arg;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testPassthru() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testPassthru_result result = new testPassthru_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testPassthru failed: unknown result");
    }

    public String testThrowsAnException() throws SimpleException, TException
    {
      send_testThrowsAnException();
      return recv_testThrowsAnException();
    }

    public void send_testThrowsAnException() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testThrowsAnException", TMessageType.CALL, seqid_));
      testThrowsAnException_args args = new testThrowsAnException_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testThrowsAnException() throws SimpleException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testThrowsAnException_result result = new testThrowsAnException_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testThrowsAnException failed: unknown result");
    }

    public String testThrowsAnUnpositionedException() throws SimpleException, TException
    {
      send_testThrowsAnUnpositionedException();
      return recv_testThrowsAnUnpositionedException();
    }

    public void send_testThrowsAnUnpositionedException() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testThrowsAnUnpositionedException", TMessageType.CALL, seqid_));
      testThrowsAnUnpositionedException_args args = new testThrowsAnUnpositionedException_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testThrowsAnUnpositionedException() throws SimpleException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testThrowsAnUnpositionedException_result result = new testThrowsAnUnpositionedException_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testThrowsAnUnpositionedException failed: unknown result");
    }

    public String testDeclaresAnException() throws SimpleException, TException
    {
      send_testDeclaresAnException();
      return recv_testDeclaresAnException();
    }

    public void send_testDeclaresAnException() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testDeclaresAnException", TMessageType.CALL, seqid_));
      testDeclaresAnException_args args = new testDeclaresAnException_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testDeclaresAnException() throws SimpleException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testDeclaresAnException_result result = new testDeclaresAnException_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testDeclaresAnException failed: unknown result");
    }

    public String testThrowsTwoExceptions(int which) throws SimpleException, MoreComplexException, TException
    {
      send_testThrowsTwoExceptions(which);
      return recv_testThrowsTwoExceptions();
    }

    public void send_testThrowsTwoExceptions(int which) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testThrowsTwoExceptions", TMessageType.CALL, seqid_));
      testThrowsTwoExceptions_args args = new testThrowsTwoExceptions_args();
      args.which = which;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testThrowsTwoExceptions() throws SimpleException, MoreComplexException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testThrowsTwoExceptions_result result = new testThrowsTwoExceptions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      if (result.ex2 != null) {
        throw result.ex2;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testThrowsTwoExceptions failed: unknown result");
    }

    public SimpleException testExceptionPassthru(SimpleException ex) throws TException
    {
      send_testExceptionPassthru(ex);
      return recv_testExceptionPassthru();
    }

    public void send_testExceptionPassthru(SimpleException ex) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testExceptionPassthru", TMessageType.CALL, seqid_));
      testExceptionPassthru_args args = new testExceptionPassthru_args();
      args.ex = ex;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SimpleException recv_testExceptionPassthru() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testExceptionPassthru_result result = new testExceptionPassthru_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testExceptionPassthru failed: unknown result");
    }

    public String testPositionalArguments(int int32, String str) throws TException
    {
      send_testPositionalArguments(int32, str);
      return recv_testPositionalArguments();
    }

    public void send_testPositionalArguments(int int32, String str) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testPositionalArguments", TMessageType.CALL, seqid_));
      testPositionalArguments_args args = new testPositionalArguments_args();
      args.int32 = int32;
      args.str = str;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_testPositionalArguments() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testPositionalArguments_result result = new testPositionalArguments_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testPositionalArguments failed: unknown result");
    }

    public Set<String> testSetString() throws TException
    {
      send_testSetString();
      return recv_testSetString();
    }

    public void send_testSetString() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testSetString", TMessageType.CALL, seqid_));
      testSetString_args args = new testSetString_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Set<String> recv_testSetString() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testSetString_result result = new testSetString_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testSetString failed: unknown result");
    }

    public Set<Integer> testSetInt() throws TException
    {
      send_testSetInt();
      return recv_testSetInt();
    }

    public void send_testSetInt() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testSetInt", TMessageType.CALL, seqid_));
      testSetInt_args args = new testSetInt_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Set<Integer> recv_testSetInt() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testSetInt_result result = new testSetInt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testSetInt failed: unknown result");
    }

    public Map<String,String> testMapStringString() throws TException
    {
      send_testMapStringString();
      return recv_testMapStringString();
    }

    public void send_testMapStringString() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testMapStringString", TMessageType.CALL, seqid_));
      testMapStringString_args args = new testMapStringString_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Map<String,String> recv_testMapStringString() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testMapStringString_result result = new testMapStringString_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testMapStringString failed: unknown result");
    }

    public ObjectThatReferencesAnother methodReturningAnObject() throws TException
    {
      send_methodReturningAnObject();
      return recv_methodReturningAnObject();
    }

    public void send_methodReturningAnObject() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("methodReturningAnObject", TMessageType.CALL, seqid_));
      methodReturningAnObject_args args = new methodReturningAnObject_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ObjectThatReferencesAnother recv_methodReturningAnObject() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      methodReturningAnObject_result result = new methodReturningAnObject_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "methodReturningAnObject failed: unknown result");
    }

    public SimpleObjectWithFieldIds methodReturningAnObject2() throws TException
    {
      send_methodReturningAnObject2();
      return recv_methodReturningAnObject2();
    }

    public void send_methodReturningAnObject2() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("methodReturningAnObject2", TMessageType.CALL, seqid_));
      methodReturningAnObject2_args args = new methodReturningAnObject2_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SimpleObjectWithFieldIds recv_methodReturningAnObject2() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      methodReturningAnObject2_result result = new methodReturningAnObject2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "methodReturningAnObject2 failed: unknown result");
    }

    public SimpleObjectWithNoFieldIds methodReturningAnObject3() throws TException
    {
      send_methodReturningAnObject3();
      return recv_methodReturningAnObject3();
    }

    public void send_methodReturningAnObject3() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("methodReturningAnObject3", TMessageType.CALL, seqid_));
      methodReturningAnObject3_args args = new methodReturningAnObject3_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SimpleObjectWithNoFieldIds recv_methodReturningAnObject3() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      methodReturningAnObject3_result result = new methodReturningAnObject3_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "methodReturningAnObject3 failed: unknown result");
    }

    public ObjectWithComplexTypes methodReturningAnObject4() throws TException
    {
      send_methodReturningAnObject4();
      return recv_methodReturningAnObject4();
    }

    public void send_methodReturningAnObject4() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("methodReturningAnObject4", TMessageType.CALL, seqid_));
      methodReturningAnObject4_args args = new methodReturningAnObject4_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ObjectWithComplexTypes recv_methodReturningAnObject4() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      methodReturningAnObject4_result result = new methodReturningAnObject4_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "methodReturningAnObject4 failed: unknown result");
    }

    public ObjectWithEnum methodReturningAnObject5(ObjectWithEnum arg) throws TException
    {
      send_methodReturningAnObject5(arg);
      return recv_methodReturningAnObject5();
    }

    public void send_methodReturningAnObject5(ObjectWithEnum arg) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("methodReturningAnObject5", TMessageType.CALL, seqid_));
      methodReturningAnObject5_args args = new methodReturningAnObject5_args();
      args.arg = arg;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ObjectWithEnum recv_methodReturningAnObject5() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      methodReturningAnObject5_result result = new methodReturningAnObject5_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "methodReturningAnObject5 failed: unknown result");
    }

    public byte[] testBinary(byte[] binaryValue) throws TException
    {
      send_testBinary(binaryValue);
      return recv_testBinary();
    }

    public void send_testBinary(byte[] binaryValue) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("testBinary", TMessageType.CALL, seqid_));
      testBinary_args args = new testBinary_args();
      args.binaryValue = binaryValue;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_testBinary() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      testBinary_result result = new testBinary_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "testBinary failed: unknown result");
    }

    public void __setContext(ContextIn context) throws TException
    {
      send___setContext(context);
      recv___setContext();
    }

    public void send___setContext(ContextIn context) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("__setContext", TMessageType.CALL, seqid_));
      __setContext_args args = new __setContext_args();
      args.context = context;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv___setContext() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      __setContext_result result = new __setContext_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      return;
    }

    public ContextOut __getContext() throws TException
    {
      send___getContext();
      return recv___getContext();
    }

    public void send___getContext() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("__getContext", TMessageType.CALL, seqid_));
      __getContext_args args = new __getContext_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ContextOut recv___getContext() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      __getContext_result result = new __getContext_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "__getContext failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("testPassthru", new testPassthru());
      processMap_.put("testThrowsAnException", new testThrowsAnException());
      processMap_.put("testThrowsAnUnpositionedException", new testThrowsAnUnpositionedException());
      processMap_.put("testDeclaresAnException", new testDeclaresAnException());
      processMap_.put("testThrowsTwoExceptions", new testThrowsTwoExceptions());
      processMap_.put("testExceptionPassthru", new testExceptionPassthru());
      processMap_.put("testPositionalArguments", new testPositionalArguments());
      processMap_.put("testSetString", new testSetString());
      processMap_.put("testSetInt", new testSetInt());
      processMap_.put("testMapStringString", new testMapStringString());
      processMap_.put("methodReturningAnObject", new methodReturningAnObject());
      processMap_.put("methodReturningAnObject2", new methodReturningAnObject2());
      processMap_.put("methodReturningAnObject3", new methodReturningAnObject3());
      processMap_.put("methodReturningAnObject4", new methodReturningAnObject4());
      processMap_.put("methodReturningAnObject5", new methodReturningAnObject5());
      processMap_.put("testBinary", new testBinary());
      processMap_.put("__setContext", new __setContext());
      processMap_.put("__getContext", new __getContext());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class testPassthru implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testPassthru_args args = new testPassthru_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testPassthru_result result = new testPassthru_result();
        result.success = iface_.testPassthru(args.arg);
        oprot.writeMessageBegin(new TMessage("testPassthru", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testThrowsAnException implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testThrowsAnException_args args = new testThrowsAnException_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testThrowsAnException_result result = new testThrowsAnException_result();
        try {
          result.success = iface_.testThrowsAnException();
        } catch (SimpleException ex) {
          result.ex = ex;
        }
        oprot.writeMessageBegin(new TMessage("testThrowsAnException", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testThrowsAnUnpositionedException implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testThrowsAnUnpositionedException_args args = new testThrowsAnUnpositionedException_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testThrowsAnUnpositionedException_result result = new testThrowsAnUnpositionedException_result();
        try {
          result.success = iface_.testThrowsAnUnpositionedException();
        } catch (SimpleException ex) {
          result.ex = ex;
        }
        oprot.writeMessageBegin(new TMessage("testThrowsAnUnpositionedException", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testDeclaresAnException implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testDeclaresAnException_args args = new testDeclaresAnException_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testDeclaresAnException_result result = new testDeclaresAnException_result();
        try {
          result.success = iface_.testDeclaresAnException();
        } catch (SimpleException ex) {
          result.ex = ex;
        }
        oprot.writeMessageBegin(new TMessage("testDeclaresAnException", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testThrowsTwoExceptions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testThrowsTwoExceptions_args args = new testThrowsTwoExceptions_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testThrowsTwoExceptions_result result = new testThrowsTwoExceptions_result();
        try {
          result.success = iface_.testThrowsTwoExceptions(args.which);
        } catch (SimpleException ex) {
          result.ex = ex;
        } catch (MoreComplexException ex2) {
          result.ex2 = ex2;
        }
        oprot.writeMessageBegin(new TMessage("testThrowsTwoExceptions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testExceptionPassthru implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testExceptionPassthru_args args = new testExceptionPassthru_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testExceptionPassthru_result result = new testExceptionPassthru_result();
        result.success = iface_.testExceptionPassthru(args.ex);
        oprot.writeMessageBegin(new TMessage("testExceptionPassthru", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testPositionalArguments implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testPositionalArguments_args args = new testPositionalArguments_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testPositionalArguments_result result = new testPositionalArguments_result();
        result.success = iface_.testPositionalArguments(args.int32, args.str);
        oprot.writeMessageBegin(new TMessage("testPositionalArguments", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testSetString implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testSetString_args args = new testSetString_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testSetString_result result = new testSetString_result();
        result.success = iface_.testSetString();
        oprot.writeMessageBegin(new TMessage("testSetString", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testSetInt implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testSetInt_args args = new testSetInt_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testSetInt_result result = new testSetInt_result();
        result.success = iface_.testSetInt();
        oprot.writeMessageBegin(new TMessage("testSetInt", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testMapStringString implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testMapStringString_args args = new testMapStringString_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testMapStringString_result result = new testMapStringString_result();
        result.success = iface_.testMapStringString();
        oprot.writeMessageBegin(new TMessage("testMapStringString", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class methodReturningAnObject implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        methodReturningAnObject_args args = new methodReturningAnObject_args();
        args.read(iprot);
        iprot.readMessageEnd();
        methodReturningAnObject_result result = new methodReturningAnObject_result();
        result.success = iface_.methodReturningAnObject();
        oprot.writeMessageBegin(new TMessage("methodReturningAnObject", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class methodReturningAnObject2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        methodReturningAnObject2_args args = new methodReturningAnObject2_args();
        args.read(iprot);
        iprot.readMessageEnd();
        methodReturningAnObject2_result result = new methodReturningAnObject2_result();
        result.success = iface_.methodReturningAnObject2();
        oprot.writeMessageBegin(new TMessage("methodReturningAnObject2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class methodReturningAnObject3 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        methodReturningAnObject3_args args = new methodReturningAnObject3_args();
        args.read(iprot);
        iprot.readMessageEnd();
        methodReturningAnObject3_result result = new methodReturningAnObject3_result();
        result.success = iface_.methodReturningAnObject3();
        oprot.writeMessageBegin(new TMessage("methodReturningAnObject3", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class methodReturningAnObject4 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        methodReturningAnObject4_args args = new methodReturningAnObject4_args();
        args.read(iprot);
        iprot.readMessageEnd();
        methodReturningAnObject4_result result = new methodReturningAnObject4_result();
        result.success = iface_.methodReturningAnObject4();
        oprot.writeMessageBegin(new TMessage("methodReturningAnObject4", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class methodReturningAnObject5 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        methodReturningAnObject5_args args = new methodReturningAnObject5_args();
        args.read(iprot);
        iprot.readMessageEnd();
        methodReturningAnObject5_result result = new methodReturningAnObject5_result();
        result.success = iface_.methodReturningAnObject5(args.arg);
        oprot.writeMessageBegin(new TMessage("methodReturningAnObject5", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class testBinary implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        testBinary_args args = new testBinary_args();
        args.read(iprot);
        iprot.readMessageEnd();
        testBinary_result result = new testBinary_result();
        result.success = iface_.testBinary(args.binaryValue);
        oprot.writeMessageBegin(new TMessage("testBinary", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class __setContext implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        __setContext_args args = new __setContext_args();
        args.read(iprot);
        iprot.readMessageEnd();
        __setContext_result result = new __setContext_result();
        iface_.__setContext(args.context);
        oprot.writeMessageBegin(new TMessage("__setContext", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class __getContext implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        __getContext_args args = new __getContext_args();
        args.read(iprot);
        iprot.readMessageEnd();
        __getContext_result result = new __getContext_result();
        result.success = iface_.__getContext();
        oprot.writeMessageBegin(new TMessage("__getContext", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class testPassthru_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testPassthru_args");
    private static final TField ARG_FIELD_DESC = new TField("arg", TType.STRING, (short)1);

    private String arg;
    public static final int ARG = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(ARG, new FieldMetaData("arg", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testPassthru_args.class, metaDataMap);
    }

    public testPassthru_args() {
    }

    public testPassthru_args(
      String arg)
    {
      this();
      this.arg = arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPassthru_args(testPassthru_args other) {
      if (other.isSetArg()) {
        this.arg = other.arg;
      }
    }

    @Override
    public testPassthru_args clone() {
      return new testPassthru_args(this);
    }

    public String getArg() {
      return this.arg;
    }

    public void setArg(String arg) {
      this.arg = arg;
    }

    public void unsetArg() {
      this.arg = null;
    }

    // Returns true if field arg is set (has been asigned a value) and false otherwise
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case ARG:
        return getArg();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case ARG:
        return isSetArg();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPassthru_args)
        return this.equals((testPassthru_args)that);
      return false;
    }

    public boolean equals(testPassthru_args that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ARG:
            if (field.type == TType.STRING) {
              this.arg = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.arg != null) {
        oprot.writeFieldBegin(ARG_FIELD_DESC);
        oprot.writeString(this.arg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPassthru_args(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testPassthru_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testPassthru_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private String success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testPassthru_result.class, metaDataMap);
    }

    public testPassthru_result() {
    }

    public testPassthru_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPassthru_result(testPassthru_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public testPassthru_result clone() {
      return new testPassthru_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPassthru_result)
        return this.equals((testPassthru_result)that);
      return false;
    }

    public boolean equals(testPassthru_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPassthru_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsAnException_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsAnException_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsAnException_args.class, metaDataMap);
    }

    public testThrowsAnException_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsAnException_args(testThrowsAnException_args other) {
    }

    @Override
    public testThrowsAnException_args clone() {
      return new testThrowsAnException_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsAnException_args)
        return this.equals((testThrowsAnException_args)that);
      return false;
    }

    public boolean equals(testThrowsAnException_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsAnException_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsAnException_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsAnException_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    private String success;
    public static final int SUCCESS = 0;
    private SimpleException ex;
    public static final int EX = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsAnException_result.class, metaDataMap);
    }

    public testThrowsAnException_result() {
    }

    public testThrowsAnException_result(
      String success,
      SimpleException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsAnException_result(testThrowsAnException_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new SimpleException(other.ex);
      }
    }

    @Override
    public testThrowsAnException_result clone() {
      return new testThrowsAnException_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public SimpleException getEx() {
      return this.ex;
    }

    public void setEx(SimpleException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been asigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((SimpleException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsAnException_result)
        return this.equals((testThrowsAnException_result)that);
      return false;
    }

    public boolean equals(testThrowsAnException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new SimpleException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsAnException_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsAnUnpositionedException_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsAnUnpositionedException_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsAnUnpositionedException_args.class, metaDataMap);
    }

    public testThrowsAnUnpositionedException_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsAnUnpositionedException_args(testThrowsAnUnpositionedException_args other) {
    }

    @Override
    public testThrowsAnUnpositionedException_args clone() {
      return new testThrowsAnUnpositionedException_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsAnUnpositionedException_args)
        return this.equals((testThrowsAnUnpositionedException_args)that);
      return false;
    }

    public boolean equals(testThrowsAnUnpositionedException_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsAnUnpositionedException_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsAnUnpositionedException_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsAnUnpositionedException_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)-1);

    private String success;
    public static final int SUCCESS = 0;
    private SimpleException ex;
    public static final int EX = -1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsAnUnpositionedException_result.class, metaDataMap);
    }

    public testThrowsAnUnpositionedException_result() {
    }

    public testThrowsAnUnpositionedException_result(
      String success,
      SimpleException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsAnUnpositionedException_result(testThrowsAnUnpositionedException_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new SimpleException(other.ex);
      }
    }

    @Override
    public testThrowsAnUnpositionedException_result clone() {
      return new testThrowsAnUnpositionedException_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public SimpleException getEx() {
      return this.ex;
    }

    public void setEx(SimpleException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been asigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((SimpleException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsAnUnpositionedException_result)
        return this.equals((testThrowsAnUnpositionedException_result)that);
      return false;
    }

    public boolean equals(testThrowsAnUnpositionedException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new SimpleException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsAnUnpositionedException_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testDeclaresAnException_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testDeclaresAnException_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testDeclaresAnException_args.class, metaDataMap);
    }

    public testDeclaresAnException_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testDeclaresAnException_args(testDeclaresAnException_args other) {
    }

    @Override
    public testDeclaresAnException_args clone() {
      return new testDeclaresAnException_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testDeclaresAnException_args)
        return this.equals((testDeclaresAnException_args)that);
      return false;
    }

    public boolean equals(testDeclaresAnException_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testDeclaresAnException_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testDeclaresAnException_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testDeclaresAnException_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    private String success;
    public static final int SUCCESS = 0;
    private SimpleException ex;
    public static final int EX = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testDeclaresAnException_result.class, metaDataMap);
    }

    public testDeclaresAnException_result() {
    }

    public testDeclaresAnException_result(
      String success,
      SimpleException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testDeclaresAnException_result(testDeclaresAnException_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new SimpleException(other.ex);
      }
    }

    @Override
    public testDeclaresAnException_result clone() {
      return new testDeclaresAnException_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public SimpleException getEx() {
      return this.ex;
    }

    public void setEx(SimpleException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been asigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((SimpleException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testDeclaresAnException_result)
        return this.equals((testDeclaresAnException_result)that);
      return false;
    }

    public boolean equals(testDeclaresAnException_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new SimpleException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testDeclaresAnException_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsTwoExceptions_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsTwoExceptions_args");
    private static final TField WHICH_FIELD_DESC = new TField("which", TType.I32, (short)-1);

    private int which;
    public static final int WHICH = -1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean which = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(WHICH, new FieldMetaData("which", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsTwoExceptions_args.class, metaDataMap);
    }

    public testThrowsTwoExceptions_args() {
    }

    public testThrowsTwoExceptions_args(
      int which)
    {
      this();
      this.which = which;
      this.__isset.which = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsTwoExceptions_args(testThrowsTwoExceptions_args other) {
      __isset.which = other.__isset.which;
      this.which = other.which;
    }

    @Override
    public testThrowsTwoExceptions_args clone() {
      return new testThrowsTwoExceptions_args(this);
    }

    public int getWhich() {
      return this.which;
    }

    public void setWhich(int which) {
      this.which = which;
      this.__isset.which = true;
    }

    public void unsetWhich() {
      this.__isset.which = false;
    }

    // Returns true if field which is set (has been asigned a value) and false otherwise
    public boolean isSetWhich() {
      return this.__isset.which;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case WHICH:
        if (value == null) {
          unsetWhich();
        } else {
          setWhich((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case WHICH:
        return new Integer(getWhich());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case WHICH:
        return isSetWhich();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsTwoExceptions_args)
        return this.equals((testThrowsTwoExceptions_args)that);
      return false;
    }

    public boolean equals(testThrowsTwoExceptions_args that) {
      if (that == null)
        return false;

      boolean this_present_which = true;
      boolean that_present_which = true;
      if (this_present_which || that_present_which) {
        if (!(this_present_which && that_present_which))
          return false;
        if (this.which != that.which)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case WHICH:
            if (field.type == TType.I32) {
              this.which = iprot.readI32();
              this.__isset.which = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WHICH_FIELD_DESC);
      oprot.writeI32(this.which);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsTwoExceptions_args(");
      boolean first = true;

      sb.append("which:");
      sb.append(this.which);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testThrowsTwoExceptions_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testThrowsTwoExceptions_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);
    private static final TField EX2_FIELD_DESC = new TField("ex2", TType.STRUCT, (short)2);

    private String success;
    public static final int SUCCESS = 0;
    private SimpleException ex;
    public static final int EX = 1;
    private MoreComplexException ex2;
    public static final int EX2 = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
      put(EX2, new FieldMetaData("ex2", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testThrowsTwoExceptions_result.class, metaDataMap);
    }

    public testThrowsTwoExceptions_result() {
    }

    public testThrowsTwoExceptions_result(
      String success,
      SimpleException ex,
      MoreComplexException ex2)
    {
      this();
      this.success = success;
      this.ex = ex;
      this.ex2 = ex2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testThrowsTwoExceptions_result(testThrowsTwoExceptions_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new SimpleException(other.ex);
      }
      if (other.isSetEx2()) {
        this.ex2 = new MoreComplexException(other.ex2);
      }
    }

    @Override
    public testThrowsTwoExceptions_result clone() {
      return new testThrowsTwoExceptions_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public SimpleException getEx() {
      return this.ex;
    }

    public void setEx(SimpleException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been asigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public MoreComplexException getEx2() {
      return this.ex2;
    }

    public void setEx2(MoreComplexException ex2) {
      this.ex2 = ex2;
    }

    public void unsetEx2() {
      this.ex2 = null;
    }

    // Returns true if field ex2 is set (has been asigned a value) and false otherwise
    public boolean isSetEx2() {
      return this.ex2 != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((SimpleException)value);
        }
        break;

      case EX2:
        if (value == null) {
          unsetEx2();
        } else {
          setEx2((MoreComplexException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      case EX2:
        return getEx2();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      case EX2:
        return isSetEx2();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testThrowsTwoExceptions_result)
        return this.equals((testThrowsTwoExceptions_result)that);
      return false;
    }

    public boolean equals(testThrowsTwoExceptions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      boolean this_present_ex2 = true && this.isSetEx2();
      boolean that_present_ex2 = true && that.isSetEx2();
      if (this_present_ex2 || that_present_ex2) {
        if (!(this_present_ex2 && that_present_ex2))
          return false;
        if (!this.ex2.equals(that.ex2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new SimpleException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EX2:
            if (field.type == TType.STRUCT) {
              this.ex2 = new MoreComplexException();
              this.ex2.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetEx()) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetEx2()) {
        oprot.writeFieldBegin(EX2_FIELD_DESC);
        this.ex2.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testThrowsTwoExceptions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex2:");
      if (this.ex2 == null) {
        sb.append("null");
      } else {
        sb.append(this.ex2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testExceptionPassthru_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testExceptionPassthru_args");
    private static final TField EX_FIELD_DESC = new TField("ex", TType.STRUCT, (short)1);

    private SimpleException ex;
    public static final int EX = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(EX, new FieldMetaData("ex", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testExceptionPassthru_args.class, metaDataMap);
    }

    public testExceptionPassthru_args() {
    }

    public testExceptionPassthru_args(
      SimpleException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testExceptionPassthru_args(testExceptionPassthru_args other) {
      if (other.isSetEx()) {
        this.ex = new SimpleException(other.ex);
      }
    }

    @Override
    public testExceptionPassthru_args clone() {
      return new testExceptionPassthru_args(this);
    }

    public SimpleException getEx() {
      return this.ex;
    }

    public void setEx(SimpleException ex) {
      this.ex = ex;
    }

    public void unsetEx() {
      this.ex = null;
    }

    // Returns true if field ex is set (has been asigned a value) and false otherwise
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((SimpleException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case EX:
        return getEx();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case EX:
        return isSetEx();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testExceptionPassthru_args)
        return this.equals((testExceptionPassthru_args)that);
      return false;
    }

    public boolean equals(testExceptionPassthru_args that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case EX:
            if (field.type == TType.STRUCT) {
              this.ex = new SimpleException();
              this.ex.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ex != null) {
        oprot.writeFieldBegin(EX_FIELD_DESC);
        this.ex.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testExceptionPassthru_args(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testExceptionPassthru_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testExceptionPassthru_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private SimpleException success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testExceptionPassthru_result.class, metaDataMap);
    }

    public testExceptionPassthru_result() {
    }

    public testExceptionPassthru_result(
      SimpleException success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testExceptionPassthru_result(testExceptionPassthru_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleException(other.success);
      }
    }

    @Override
    public testExceptionPassthru_result clone() {
      return new testExceptionPassthru_result(this);
    }

    public SimpleException getSuccess() {
      return this.success;
    }

    public void setSuccess(SimpleException success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimpleException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testExceptionPassthru_result)
        return this.equals((testExceptionPassthru_result)that);
      return false;
    }

    public boolean equals(testExceptionPassthru_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new SimpleException();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testExceptionPassthru_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testPositionalArguments_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testPositionalArguments_args");
    private static final TField INT32_FIELD_DESC = new TField("int32", TType.I32, (short)1);
    private static final TField STR_FIELD_DESC = new TField("str", TType.STRING, (short)2);

    private int int32;
    public static final int INT32 = 1;
    private String str;
    public static final int STR = 2;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean int32 = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(INT32, new FieldMetaData("int32", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      put(STR, new FieldMetaData("str", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testPositionalArguments_args.class, metaDataMap);
    }

    public testPositionalArguments_args() {
    }

    public testPositionalArguments_args(
      int int32,
      String str)
    {
      this();
      this.int32 = int32;
      this.__isset.int32 = true;
      this.str = str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPositionalArguments_args(testPositionalArguments_args other) {
      __isset.int32 = other.__isset.int32;
      this.int32 = other.int32;
      if (other.isSetStr()) {
        this.str = other.str;
      }
    }

    @Override
    public testPositionalArguments_args clone() {
      return new testPositionalArguments_args(this);
    }

    public int getInt32() {
      return this.int32;
    }

    public void setInt32(int int32) {
      this.int32 = int32;
      this.__isset.int32 = true;
    }

    public void unsetInt32() {
      this.__isset.int32 = false;
    }

    // Returns true if field int32 is set (has been asigned a value) and false otherwise
    public boolean isSetInt32() {
      return this.__isset.int32;
    }

    public String getStr() {
      return this.str;
    }

    public void setStr(String str) {
      this.str = str;
    }

    public void unsetStr() {
      this.str = null;
    }

    // Returns true if field str is set (has been asigned a value) and false otherwise
    public boolean isSetStr() {
      return this.str != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case INT32:
        if (value == null) {
          unsetInt32();
        } else {
          setInt32((Integer)value);
        }
        break;

      case STR:
        if (value == null) {
          unsetStr();
        } else {
          setStr((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case INT32:
        return new Integer(getInt32());

      case STR:
        return getStr();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case INT32:
        return isSetInt32();
      case STR:
        return isSetStr();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPositionalArguments_args)
        return this.equals((testPositionalArguments_args)that);
      return false;
    }

    public boolean equals(testPositionalArguments_args that) {
      if (that == null)
        return false;

      boolean this_present_int32 = true;
      boolean that_present_int32 = true;
      if (this_present_int32 || that_present_int32) {
        if (!(this_present_int32 && that_present_int32))
          return false;
        if (this.int32 != that.int32)
          return false;
      }

      boolean this_present_str = true && this.isSetStr();
      boolean that_present_str = true && that.isSetStr();
      if (this_present_str || that_present_str) {
        if (!(this_present_str && that_present_str))
          return false;
        if (!this.str.equals(that.str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case INT32:
            if (field.type == TType.I32) {
              this.int32 = iprot.readI32();
              this.__isset.int32 = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STR:
            if (field.type == TType.STRING) {
              this.str = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INT32_FIELD_DESC);
      oprot.writeI32(this.int32);
      oprot.writeFieldEnd();
      if (this.str != null) {
        oprot.writeFieldBegin(STR_FIELD_DESC);
        oprot.writeString(this.str);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPositionalArguments_args(");
      boolean first = true;

      sb.append("int32:");
      sb.append(this.int32);
      first = false;
      if (!first) sb.append(", ");
      sb.append("str:");
      if (this.str == null) {
        sb.append("null");
      } else {
        sb.append(this.str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testPositionalArguments_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testPositionalArguments_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private String success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testPositionalArguments_result.class, metaDataMap);
    }

    public testPositionalArguments_result() {
    }

    public testPositionalArguments_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testPositionalArguments_result(testPositionalArguments_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public testPositionalArguments_result clone() {
      return new testPositionalArguments_result(this);
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testPositionalArguments_result)
        return this.equals((testPositionalArguments_result)that);
      return false;
    }

    public boolean equals(testPositionalArguments_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testPositionalArguments_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testSetString_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testSetString_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testSetString_args.class, metaDataMap);
    }

    public testSetString_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testSetString_args(testSetString_args other) {
    }

    @Override
    public testSetString_args clone() {
      return new testSetString_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testSetString_args)
        return this.equals((testSetString_args)that);
      return false;
    }

    public boolean equals(testSetString_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testSetString_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testSetString_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testSetString_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short)0);

    private Set<String> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new SetMetaData(TType.SET, 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testSetString_result.class, metaDataMap);
    }

    public testSetString_result() {
    }

    public testSetString_result(
      Set<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testSetString_result(testSetString_result other) {
      if (other.isSetSuccess()) {
        Set<String> __this__success = new HashSet<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    @Override
    public testSetString_result clone() {
      return new testSetString_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new HashSet<String>();
      }
      this.success.add(elem);
    }

    public Set<String> getSuccess() {
      return this.success;
    }

    public void setSuccess(Set<String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testSetString_result)
        return this.equals((testSetString_result)that);
      return false;
    }

    public boolean equals(testSetString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.SET) {
              {
                TSet _set31 = iprot.readSetBegin();
                this.success = new HashSet<String>(2*_set31.size);
                for (int _i32 = 0; _i32 < _set31.size; ++_i32)
                {
                  String _elem33;
                  _elem33 = iprot.readString();
                  this.success.add(_elem33);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
          for (String _iter34 : this.success)          {
            oprot.writeString(_iter34);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testSetString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testSetInt_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testSetInt_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testSetInt_args.class, metaDataMap);
    }

    public testSetInt_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testSetInt_args(testSetInt_args other) {
    }

    @Override
    public testSetInt_args clone() {
      return new testSetInt_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testSetInt_args)
        return this.equals((testSetInt_args)that);
      return false;
    }

    public boolean equals(testSetInt_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testSetInt_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testSetInt_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testSetInt_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short)0);

    private Set<Integer> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new SetMetaData(TType.SET, 
              new FieldValueMetaData(TType.I32))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testSetInt_result.class, metaDataMap);
    }

    public testSetInt_result() {
    }

    public testSetInt_result(
      Set<Integer> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testSetInt_result(testSetInt_result other) {
      if (other.isSetSuccess()) {
        Set<Integer> __this__success = new HashSet<Integer>();
        for (Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    @Override
    public testSetInt_result clone() {
      return new testSetInt_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new HashSet<Integer>();
      }
      this.success.add(elem);
    }

    public Set<Integer> getSuccess() {
      return this.success;
    }

    public void setSuccess(Set<Integer> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Integer>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testSetInt_result)
        return this.equals((testSetInt_result)that);
      return false;
    }

    public boolean equals(testSetInt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.SET) {
              {
                TSet _set35 = iprot.readSetBegin();
                this.success = new HashSet<Integer>(2*_set35.size);
                for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                {
                  int _elem37;
                  _elem37 = iprot.readI32();
                  this.success.add(_elem37);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.success.size()));
          for (int _iter38 : this.success)          {
            oprot.writeI32(_iter38);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testSetInt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testMapStringString_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testMapStringString_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testMapStringString_args.class, metaDataMap);
    }

    public testMapStringString_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testMapStringString_args(testMapStringString_args other) {
    }

    @Override
    public testMapStringString_args clone() {
      return new testMapStringString_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testMapStringString_args)
        return this.equals((testMapStringString_args)that);
      return false;
    }

    public boolean equals(testMapStringString_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testMapStringString_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testMapStringString_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testMapStringString_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);

    private Map<String,String> success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.STRING), 
              new FieldValueMetaData(TType.STRING))));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testMapStringString_result.class, metaDataMap);
    }

    public testMapStringString_result() {
    }

    public testMapStringString_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testMapStringString_result(testMapStringString_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          String other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    @Override
    public testMapStringString_result clone() {
      return new testMapStringString_result(this);
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public void setSuccess(Map<String,String> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testMapStringString_result)
        return this.equals((testMapStringString_result)that);
      return false;
    }

    public boolean equals(testMapStringString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.MAP) {
              {
                TMap _map39 = iprot.readMapBegin();
                this.success = new HashMap<String,String>(2*_map39.size);
                for (int _i40 = 0; _i40 < _map39.size; ++_i40)
                {
                  String _key41;
                  String _val42;
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  this.success.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Map.Entry<String, String> _iter43 : this.success.entrySet())          {
            oprot.writeString(_iter43.getKey());
            oprot.writeString(_iter43.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testMapStringString_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject_args.class, metaDataMap);
    }

    public methodReturningAnObject_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject_args(methodReturningAnObject_args other) {
    }

    @Override
    public methodReturningAnObject_args clone() {
      return new methodReturningAnObject_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject_args)
        return this.equals((methodReturningAnObject_args)that);
      return false;
    }

    public boolean equals(methodReturningAnObject_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private ObjectThatReferencesAnother success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ObjectThatReferencesAnother.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject_result.class, metaDataMap);
    }

    public methodReturningAnObject_result() {
    }

    public methodReturningAnObject_result(
      ObjectThatReferencesAnother success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject_result(methodReturningAnObject_result other) {
      if (other.isSetSuccess()) {
        this.success = new ObjectThatReferencesAnother(other.success);
      }
    }

    @Override
    public methodReturningAnObject_result clone() {
      return new methodReturningAnObject_result(this);
    }

    public ObjectThatReferencesAnother getSuccess() {
      return this.success;
    }

    public void setSuccess(ObjectThatReferencesAnother success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ObjectThatReferencesAnother)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject_result)
        return this.equals((methodReturningAnObject_result)that);
      return false;
    }

    public boolean equals(methodReturningAnObject_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ObjectThatReferencesAnother();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject2_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject2_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject2_args.class, metaDataMap);
    }

    public methodReturningAnObject2_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject2_args(methodReturningAnObject2_args other) {
    }

    @Override
    public methodReturningAnObject2_args clone() {
      return new methodReturningAnObject2_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject2_args)
        return this.equals((methodReturningAnObject2_args)that);
      return false;
    }

    public boolean equals(methodReturningAnObject2_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject2_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject2_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject2_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private SimpleObjectWithFieldIds success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SimpleObjectWithFieldIds.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject2_result.class, metaDataMap);
    }

    public methodReturningAnObject2_result() {
    }

    public methodReturningAnObject2_result(
      SimpleObjectWithFieldIds success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject2_result(methodReturningAnObject2_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleObjectWithFieldIds(other.success);
      }
    }

    @Override
    public methodReturningAnObject2_result clone() {
      return new methodReturningAnObject2_result(this);
    }

    public SimpleObjectWithFieldIds getSuccess() {
      return this.success;
    }

    public void setSuccess(SimpleObjectWithFieldIds success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimpleObjectWithFieldIds)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject2_result)
        return this.equals((methodReturningAnObject2_result)that);
      return false;
    }

    public boolean equals(methodReturningAnObject2_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new SimpleObjectWithFieldIds();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject3_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject3_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject3_args.class, metaDataMap);
    }

    public methodReturningAnObject3_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject3_args(methodReturningAnObject3_args other) {
    }

    @Override
    public methodReturningAnObject3_args clone() {
      return new methodReturningAnObject3_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject3_args)
        return this.equals((methodReturningAnObject3_args)that);
      return false;
    }

    public boolean equals(methodReturningAnObject3_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject3_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject3_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject3_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private SimpleObjectWithNoFieldIds success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, SimpleObjectWithNoFieldIds.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject3_result.class, metaDataMap);
    }

    public methodReturningAnObject3_result() {
    }

    public methodReturningAnObject3_result(
      SimpleObjectWithNoFieldIds success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject3_result(methodReturningAnObject3_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleObjectWithNoFieldIds(other.success);
      }
    }

    @Override
    public methodReturningAnObject3_result clone() {
      return new methodReturningAnObject3_result(this);
    }

    public SimpleObjectWithNoFieldIds getSuccess() {
      return this.success;
    }

    public void setSuccess(SimpleObjectWithNoFieldIds success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SimpleObjectWithNoFieldIds)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject3_result)
        return this.equals((methodReturningAnObject3_result)that);
      return false;
    }

    public boolean equals(methodReturningAnObject3_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new SimpleObjectWithNoFieldIds();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject3_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject4_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject4_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject4_args.class, metaDataMap);
    }

    public methodReturningAnObject4_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject4_args(methodReturningAnObject4_args other) {
    }

    @Override
    public methodReturningAnObject4_args clone() {
      return new methodReturningAnObject4_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject4_args)
        return this.equals((methodReturningAnObject4_args)that);
      return false;
    }

    public boolean equals(methodReturningAnObject4_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject4_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject4_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject4_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private ObjectWithComplexTypes success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ObjectWithComplexTypes.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject4_result.class, metaDataMap);
    }

    public methodReturningAnObject4_result() {
    }

    public methodReturningAnObject4_result(
      ObjectWithComplexTypes success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject4_result(methodReturningAnObject4_result other) {
      if (other.isSetSuccess()) {
        this.success = new ObjectWithComplexTypes(other.success);
      }
    }

    @Override
    public methodReturningAnObject4_result clone() {
      return new methodReturningAnObject4_result(this);
    }

    public ObjectWithComplexTypes getSuccess() {
      return this.success;
    }

    public void setSuccess(ObjectWithComplexTypes success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ObjectWithComplexTypes)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject4_result)
        return this.equals((methodReturningAnObject4_result)that);
      return false;
    }

    public boolean equals(methodReturningAnObject4_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ObjectWithComplexTypes();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject4_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject5_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject5_args");
    private static final TField ARG_FIELD_DESC = new TField("arg", TType.STRUCT, (short)1);

    private ObjectWithEnum arg;
    public static final int ARG = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(ARG, new FieldMetaData("arg", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ObjectWithEnum.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject5_args.class, metaDataMap);
    }

    public methodReturningAnObject5_args() {
    }

    public methodReturningAnObject5_args(
      ObjectWithEnum arg)
    {
      this();
      this.arg = arg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject5_args(methodReturningAnObject5_args other) {
      if (other.isSetArg()) {
        this.arg = new ObjectWithEnum(other.arg);
      }
    }

    @Override
    public methodReturningAnObject5_args clone() {
      return new methodReturningAnObject5_args(this);
    }

    public ObjectWithEnum getArg() {
      return this.arg;
    }

    public void setArg(ObjectWithEnum arg) {
      this.arg = arg;
    }

    public void unsetArg() {
      this.arg = null;
    }

    // Returns true if field arg is set (has been asigned a value) and false otherwise
    public boolean isSetArg() {
      return this.arg != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case ARG:
        if (value == null) {
          unsetArg();
        } else {
          setArg((ObjectWithEnum)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case ARG:
        return getArg();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case ARG:
        return isSetArg();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject5_args)
        return this.equals((methodReturningAnObject5_args)that);
      return false;
    }

    public boolean equals(methodReturningAnObject5_args that) {
      if (that == null)
        return false;

      boolean this_present_arg = true && this.isSetArg();
      boolean that_present_arg = true && that.isSetArg();
      if (this_present_arg || that_present_arg) {
        if (!(this_present_arg && that_present_arg))
          return false;
        if (!this.arg.equals(that.arg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ARG:
            if (field.type == TType.STRUCT) {
              this.arg = new ObjectWithEnum();
              this.arg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.arg != null) {
        oprot.writeFieldBegin(ARG_FIELD_DESC);
        this.arg.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject5_args(");
      boolean first = true;

      sb.append("arg:");
      if (this.arg == null) {
        sb.append("null");
      } else {
        sb.append(this.arg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class methodReturningAnObject5_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("methodReturningAnObject5_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private ObjectWithEnum success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ObjectWithEnum.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(methodReturningAnObject5_result.class, metaDataMap);
    }

    public methodReturningAnObject5_result() {
    }

    public methodReturningAnObject5_result(
      ObjectWithEnum success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public methodReturningAnObject5_result(methodReturningAnObject5_result other) {
      if (other.isSetSuccess()) {
        this.success = new ObjectWithEnum(other.success);
      }
    }

    @Override
    public methodReturningAnObject5_result clone() {
      return new methodReturningAnObject5_result(this);
    }

    public ObjectWithEnum getSuccess() {
      return this.success;
    }

    public void setSuccess(ObjectWithEnum success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ObjectWithEnum)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof methodReturningAnObject5_result)
        return this.equals((methodReturningAnObject5_result)that);
      return false;
    }

    public boolean equals(methodReturningAnObject5_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ObjectWithEnum();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("methodReturningAnObject5_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testBinary_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testBinary_args");
    private static final TField BINARY_VALUE_FIELD_DESC = new TField("binaryValue", TType.STRING, (short)1);

    private byte[] binaryValue;
    public static final int BINARYVALUE = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BINARYVALUE, new FieldMetaData("binaryValue", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testBinary_args.class, metaDataMap);
    }

    public testBinary_args() {
    }

    public testBinary_args(
      byte[] binaryValue)
    {
      this();
      this.binaryValue = binaryValue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testBinary_args(testBinary_args other) {
      if (other.isSetBinaryValue()) {
        this.binaryValue = new byte[other.binaryValue.length];
        System.arraycopy(other.binaryValue, 0, binaryValue, 0, other.binaryValue.length);
      }
    }

    @Override
    public testBinary_args clone() {
      return new testBinary_args(this);
    }

    public byte[] getBinaryValue() {
      return this.binaryValue;
    }

    public void setBinaryValue(byte[] binaryValue) {
      this.binaryValue = binaryValue;
    }

    public void unsetBinaryValue() {
      this.binaryValue = null;
    }

    // Returns true if field binaryValue is set (has been asigned a value) and false otherwise
    public boolean isSetBinaryValue() {
      return this.binaryValue != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BINARYVALUE:
        if (value == null) {
          unsetBinaryValue();
        } else {
          setBinaryValue((byte[])value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BINARYVALUE:
        return getBinaryValue();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BINARYVALUE:
        return isSetBinaryValue();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testBinary_args)
        return this.equals((testBinary_args)that);
      return false;
    }

    public boolean equals(testBinary_args that) {
      if (that == null)
        return false;

      boolean this_present_binaryValue = true && this.isSetBinaryValue();
      boolean that_present_binaryValue = true && that.isSetBinaryValue();
      if (this_present_binaryValue || that_present_binaryValue) {
        if (!(this_present_binaryValue && that_present_binaryValue))
          return false;
        if (!java.util.Arrays.equals(this.binaryValue, that.binaryValue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BINARYVALUE:
            if (field.type == TType.STRING) {
              this.binaryValue = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.binaryValue != null) {
        oprot.writeFieldBegin(BINARY_VALUE_FIELD_DESC);
        oprot.writeBinary(this.binaryValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testBinary_args(");
      boolean first = true;

      sb.append("binaryValue:");
      if (this.binaryValue == null) {
        sb.append("null");
      } else {
          int __binaryValue_size = Math.min(this.binaryValue.length, 128);
          for (int i = 0; i < __binaryValue_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.binaryValue[i]).length() > 1 ? Integer.toHexString(this.binaryValue[i]).substring(Integer.toHexString(this.binaryValue[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.binaryValue[i]).toUpperCase());
          }
          if (this.binaryValue.length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class testBinary_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("testBinary_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    private byte[] success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(testBinary_result.class, metaDataMap);
    }

    public testBinary_result() {
    }

    public testBinary_result(
      byte[] success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testBinary_result(testBinary_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
    }

    @Override
    public testBinary_result clone() {
      return new testBinary_result(this);
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((byte[])value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testBinary_result)
        return this.equals((testBinary_result)that);
      return false;
    }

    public boolean equals(testBinary_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!java.util.Arrays.equals(this.success, that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
          int __success_size = Math.min(this.success.length, 128);
          for (int i = 0; i < __success_size; i++) {
            if (i != 0) sb.append(" ");
            sb.append(Integer.toHexString(this.success[i]).length() > 1 ? Integer.toHexString(this.success[i]).substring(Integer.toHexString(this.success[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.success[i]).toUpperCase());
          }
          if (this.success.length > 128) sb.append(" ...");
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class __setContext_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("__setContext_args");
    private static final TField CONTEXT_FIELD_DESC = new TField("context", TType.STRUCT, (short)1);

    private ContextIn context;
    public static final int CONTEXT = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(CONTEXT, new FieldMetaData("context", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ContextIn.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(__setContext_args.class, metaDataMap);
    }

    public __setContext_args() {
    }

    public __setContext_args(
      ContextIn context)
    {
      this();
      this.context = context;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public __setContext_args(__setContext_args other) {
      if (other.isSetContext()) {
        this.context = new ContextIn(other.context);
      }
    }

    @Override
    public __setContext_args clone() {
      return new __setContext_args(this);
    }

    public ContextIn getContext() {
      return this.context;
    }

    public void setContext(ContextIn context) {
      this.context = context;
    }

    public void unsetContext() {
      this.context = null;
    }

    // Returns true if field context is set (has been asigned a value) and false otherwise
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((ContextIn)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case CONTEXT:
        return getContext();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case CONTEXT:
        return isSetContext();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof __setContext_args)
        return this.equals((__setContext_args)that);
      return false;
    }

    public boolean equals(__setContext_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case CONTEXT:
            if (field.type == TType.STRUCT) {
              this.context = new ContextIn();
              this.context.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.context != null) {
        oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
        this.context.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("__setContext_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class __setContext_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("__setContext_result");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(__setContext_result.class, metaDataMap);
    }

    public __setContext_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public __setContext_result(__setContext_result other) {
    }

    @Override
    public __setContext_result clone() {
      return new __setContext_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof __setContext_result)
        return this.equals((__setContext_result)that);
      return false;
    }

    public boolean equals(__setContext_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("__setContext_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class __getContext_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("__getContext_args");

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    }});

    static {
      FieldMetaData.addStructMetaDataMap(__getContext_args.class, metaDataMap);
    }

    public __getContext_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public __getContext_args(__getContext_args other) {
    }

    @Override
    public __getContext_args clone() {
      return new __getContext_args(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof __getContext_args)
        return this.equals((__getContext_args)that);
      return false;
    }

    public boolean equals(__getContext_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("__getContext_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class __getContext_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("__getContext_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);

    private ContextOut success;
    public static final int SUCCESS = 0;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, ContextOut.class)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(__getContext_result.class, metaDataMap);
    }

    public __getContext_result() {
    }

    public __getContext_result(
      ContextOut success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public __getContext_result(__getContext_result other) {
      if (other.isSetSuccess()) {
        this.success = new ContextOut(other.success);
      }
    }

    @Override
    public __getContext_result clone() {
      return new __getContext_result(this);
    }

    public ContextOut getSuccess() {
      return this.success;
    }

    public void setSuccess(ContextOut success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ContextOut)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof __getContext_result)
        return this.equals((__getContext_result)that);
      return false;
    }

    public boolean equals(__getContext_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new ContextOut();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("__getContext_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
