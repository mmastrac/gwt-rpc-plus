/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dotspots.rpcplus.example.torturetest;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;

import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;

public class ObjectThatReferencesAnother implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ObjectThatReferencesAnother");
  private static final TField REFERENCE_FIELD_DESC = new TField("reference", TType.STRUCT, (short)1);

  private ObjectThatIsReferenced reference;
  public static final int REFERENCE = 1;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(REFERENCE, new FieldMetaData("reference", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, ObjectThatIsReferenced.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ObjectThatReferencesAnother.class, metaDataMap);
  }

  public ObjectThatReferencesAnother() {
  }

  public ObjectThatReferencesAnother(
    ObjectThatIsReferenced reference)
  {
    this();
    this.reference = reference;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ObjectThatReferencesAnother(ObjectThatReferencesAnother other) {
    if (other.isSetReference()) {
      this.reference = new ObjectThatIsReferenced(other.reference);
    }
  }

  @Override
  public ObjectThatReferencesAnother clone() {
    return new ObjectThatReferencesAnother(this);
  }

  public ObjectThatIsReferenced getReference() {
    return this.reference;
  }

  public void setReference(ObjectThatIsReferenced reference) {
    this.reference = reference;
  }

  public void unsetReference() {
    this.reference = null;
  }

  // Returns true if field reference is set (has been asigned a value) and false otherwise
  public boolean isSetReference() {
    return this.reference != null;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case REFERENCE:
      if (value == null) {
        unsetReference();
      } else {
        setReference((ObjectThatIsReferenced)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case REFERENCE:
      return getReference();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case REFERENCE:
      return isSetReference();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ObjectThatReferencesAnother)
      return this.equals((ObjectThatReferencesAnother)that);
    return false;
  }

  public boolean equals(ObjectThatReferencesAnother that) {
    if (that == null)
      return false;

    boolean this_present_reference = true && this.isSetReference();
    boolean that_present_reference = true && that.isSetReference();
    if (this_present_reference || that_present_reference) {
      if (!(this_present_reference && that_present_reference))
        return false;
      if (!this.reference.equals(that.reference))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case REFERENCE:
          if (field.type == TType.STRUCT) {
            this.reference = new ObjectThatIsReferenced();
            this.reference.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.reference != null) {
      oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
      this.reference.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ObjectThatReferencesAnother(");
    boolean first = true;

    sb.append("reference:");
    if (this.reference == null) {
      sb.append("null");
    } else {
      sb.append(this.reference);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

