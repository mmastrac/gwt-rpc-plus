/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dotspots.rpcplus.example.torturetest;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;

import org.apache.thrift.protocol.*;
import org.apache.thrift.transport.*;

public class ObjectWithComplexTypes implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ObjectWithComplexTypes");
  private static final TField MAP_STRING_TO_STRING_FIELD_DESC = new TField("mapStringToString", TType.MAP, (short)1);
  private static final TField SET_OF_STRINGS_FIELD_DESC = new TField("setOfStrings", TType.SET, (short)2);
  private static final TField LIST_OF_STRINGS_FIELD_DESC = new TField("listOfStrings", TType.LIST, (short)3);
  private static final TField MAP_OF_INT_TO_INT_FIELD_DESC = new TField("mapOfIntToInt", TType.MAP, (short)4);

  private Map<String,String> mapStringToString;
  public static final int MAPSTRINGTOSTRING = 1;
  private Set<String> setOfStrings;
  public static final int SETOFSTRINGS = 2;
  private List<String> listOfStrings;
  public static final int LISTOFSTRINGS = 3;
  private Map<Integer,Integer> mapOfIntToInt;
  public static final int MAPOFINTTOINT = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(MAPSTRINGTOSTRING, new FieldMetaData("mapStringToString", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(SETOFSTRINGS, new FieldMetaData("setOfStrings", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    put(LISTOFSTRINGS, new FieldMetaData("listOfStrings", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    put(MAPOFINTTOINT, new FieldMetaData("mapOfIntToInt", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.I32))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ObjectWithComplexTypes.class, metaDataMap);
  }

  public ObjectWithComplexTypes() {
  }

  public ObjectWithComplexTypes(
    Map<String,String> mapStringToString,
    Set<String> setOfStrings,
    List<String> listOfStrings,
    Map<Integer,Integer> mapOfIntToInt)
  {
    this();
    this.mapStringToString = mapStringToString;
    this.setOfStrings = setOfStrings;
    this.listOfStrings = listOfStrings;
    this.mapOfIntToInt = mapOfIntToInt;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ObjectWithComplexTypes(ObjectWithComplexTypes other) {
    if (other.isSetMapStringToString()) {
      Map<String,String> __this__mapStringToString = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.mapStringToString.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__mapStringToString_copy_key = other_element_key;

        String __this__mapStringToString_copy_value = other_element_value;

        __this__mapStringToString.put(__this__mapStringToString_copy_key, __this__mapStringToString_copy_value);
      }
      this.mapStringToString = __this__mapStringToString;
    }
    if (other.isSetSetOfStrings()) {
      Set<String> __this__setOfStrings = new HashSet<String>();
      for (String other_element : other.setOfStrings) {
        __this__setOfStrings.add(other_element);
      }
      this.setOfStrings = __this__setOfStrings;
    }
    if (other.isSetListOfStrings()) {
      List<String> __this__listOfStrings = new ArrayList<String>();
      for (String other_element : other.listOfStrings) {
        __this__listOfStrings.add(other_element);
      }
      this.listOfStrings = __this__listOfStrings;
    }
    if (other.isSetMapOfIntToInt()) {
      Map<Integer,Integer> __this__mapOfIntToInt = new HashMap<Integer,Integer>();
      for (Map.Entry<Integer, Integer> other_element : other.mapOfIntToInt.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__mapOfIntToInt_copy_key = other_element_key;

        Integer __this__mapOfIntToInt_copy_value = other_element_value;

        __this__mapOfIntToInt.put(__this__mapOfIntToInt_copy_key, __this__mapOfIntToInt_copy_value);
      }
      this.mapOfIntToInt = __this__mapOfIntToInt;
    }
  }

  @Override
  public ObjectWithComplexTypes clone() {
    return new ObjectWithComplexTypes(this);
  }

  public int getMapStringToStringSize() {
    return (this.mapStringToString == null) ? 0 : this.mapStringToString.size();
  }

  public void putToMapStringToString(String key, String val) {
    if (this.mapStringToString == null) {
      this.mapStringToString = new HashMap<String,String>();
    }
    this.mapStringToString.put(key, val);
  }

  public Map<String,String> getMapStringToString() {
    return this.mapStringToString;
  }

  public void setMapStringToString(Map<String,String> mapStringToString) {
    this.mapStringToString = mapStringToString;
  }

  public void unsetMapStringToString() {
    this.mapStringToString = null;
  }

  // Returns true if field mapStringToString is set (has been asigned a value) and false otherwise
  public boolean isSetMapStringToString() {
    return this.mapStringToString != null;
  }

  public int getSetOfStringsSize() {
    return (this.setOfStrings == null) ? 0 : this.setOfStrings.size();
  }

  public java.util.Iterator<String> getSetOfStringsIterator() {
    return (this.setOfStrings == null) ? null : this.setOfStrings.iterator();
  }

  public void addToSetOfStrings(String elem) {
    if (this.setOfStrings == null) {
      this.setOfStrings = new HashSet<String>();
    }
    this.setOfStrings.add(elem);
  }

  public Set<String> getSetOfStrings() {
    return this.setOfStrings;
  }

  public void setSetOfStrings(Set<String> setOfStrings) {
    this.setOfStrings = setOfStrings;
  }

  public void unsetSetOfStrings() {
    this.setOfStrings = null;
  }

  // Returns true if field setOfStrings is set (has been asigned a value) and false otherwise
  public boolean isSetSetOfStrings() {
    return this.setOfStrings != null;
  }

  public int getListOfStringsSize() {
    return (this.listOfStrings == null) ? 0 : this.listOfStrings.size();
  }

  public java.util.Iterator<String> getListOfStringsIterator() {
    return (this.listOfStrings == null) ? null : this.listOfStrings.iterator();
  }

  public void addToListOfStrings(String elem) {
    if (this.listOfStrings == null) {
      this.listOfStrings = new ArrayList<String>();
    }
    this.listOfStrings.add(elem);
  }

  public List<String> getListOfStrings() {
    return this.listOfStrings;
  }

  public void setListOfStrings(List<String> listOfStrings) {
    this.listOfStrings = listOfStrings;
  }

  public void unsetListOfStrings() {
    this.listOfStrings = null;
  }

  // Returns true if field listOfStrings is set (has been asigned a value) and false otherwise
  public boolean isSetListOfStrings() {
    return this.listOfStrings != null;
  }

  public int getMapOfIntToIntSize() {
    return (this.mapOfIntToInt == null) ? 0 : this.mapOfIntToInt.size();
  }

  public void putToMapOfIntToInt(int key, int val) {
    if (this.mapOfIntToInt == null) {
      this.mapOfIntToInt = new HashMap<Integer,Integer>();
    }
    this.mapOfIntToInt.put(key, val);
  }

  public Map<Integer,Integer> getMapOfIntToInt() {
    return this.mapOfIntToInt;
  }

  public void setMapOfIntToInt(Map<Integer,Integer> mapOfIntToInt) {
    this.mapOfIntToInt = mapOfIntToInt;
  }

  public void unsetMapOfIntToInt() {
    this.mapOfIntToInt = null;
  }

  // Returns true if field mapOfIntToInt is set (has been asigned a value) and false otherwise
  public boolean isSetMapOfIntToInt() {
    return this.mapOfIntToInt != null;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case MAPSTRINGTOSTRING:
      if (value == null) {
        unsetMapStringToString();
      } else {
        setMapStringToString((Map<String,String>)value);
      }
      break;

    case SETOFSTRINGS:
      if (value == null) {
        unsetSetOfStrings();
      } else {
        setSetOfStrings((Set<String>)value);
      }
      break;

    case LISTOFSTRINGS:
      if (value == null) {
        unsetListOfStrings();
      } else {
        setListOfStrings((List<String>)value);
      }
      break;

    case MAPOFINTTOINT:
      if (value == null) {
        unsetMapOfIntToInt();
      } else {
        setMapOfIntToInt((Map<Integer,Integer>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case MAPSTRINGTOSTRING:
      return getMapStringToString();

    case SETOFSTRINGS:
      return getSetOfStrings();

    case LISTOFSTRINGS:
      return getListOfStrings();

    case MAPOFINTTOINT:
      return getMapOfIntToInt();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case MAPSTRINGTOSTRING:
      return isSetMapStringToString();
    case SETOFSTRINGS:
      return isSetSetOfStrings();
    case LISTOFSTRINGS:
      return isSetListOfStrings();
    case MAPOFINTTOINT:
      return isSetMapOfIntToInt();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ObjectWithComplexTypes)
      return this.equals((ObjectWithComplexTypes)that);
    return false;
  }

  public boolean equals(ObjectWithComplexTypes that) {
    if (that == null)
      return false;

    boolean this_present_mapStringToString = true && this.isSetMapStringToString();
    boolean that_present_mapStringToString = true && that.isSetMapStringToString();
    if (this_present_mapStringToString || that_present_mapStringToString) {
      if (!(this_present_mapStringToString && that_present_mapStringToString))
        return false;
      if (!this.mapStringToString.equals(that.mapStringToString))
        return false;
    }

    boolean this_present_setOfStrings = true && this.isSetSetOfStrings();
    boolean that_present_setOfStrings = true && that.isSetSetOfStrings();
    if (this_present_setOfStrings || that_present_setOfStrings) {
      if (!(this_present_setOfStrings && that_present_setOfStrings))
        return false;
      if (!this.setOfStrings.equals(that.setOfStrings))
        return false;
    }

    boolean this_present_listOfStrings = true && this.isSetListOfStrings();
    boolean that_present_listOfStrings = true && that.isSetListOfStrings();
    if (this_present_listOfStrings || that_present_listOfStrings) {
      if (!(this_present_listOfStrings && that_present_listOfStrings))
        return false;
      if (!this.listOfStrings.equals(that.listOfStrings))
        return false;
    }

    boolean this_present_mapOfIntToInt = true && this.isSetMapOfIntToInt();
    boolean that_present_mapOfIntToInt = true && that.isSetMapOfIntToInt();
    if (this_present_mapOfIntToInt || that_present_mapOfIntToInt) {
      if (!(this_present_mapOfIntToInt && that_present_mapOfIntToInt))
        return false;
      if (!this.mapOfIntToInt.equals(that.mapOfIntToInt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case MAPSTRINGTOSTRING:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.mapStringToString = new HashMap<String,String>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                String _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readString();
                this.mapStringToString.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SETOFSTRINGS:
          if (field.type == TType.SET) {
            {
              TSet _set4 = iprot.readSetBegin();
              this.setOfStrings = new HashSet<String>(2*_set4.size);
              for (int _i5 = 0; _i5 < _set4.size; ++_i5)
              {
                String _elem6;
                _elem6 = iprot.readString();
                this.setOfStrings.add(_elem6);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LISTOFSTRINGS:
          if (field.type == TType.LIST) {
            {
              TList _list7 = iprot.readListBegin();
              this.listOfStrings = new ArrayList<String>(_list7.size);
              for (int _i8 = 0; _i8 < _list7.size; ++_i8)
              {
                String _elem9;
                _elem9 = iprot.readString();
                this.listOfStrings.add(_elem9);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAPOFINTTOINT:
          if (field.type == TType.MAP) {
            {
              TMap _map10 = iprot.readMapBegin();
              this.mapOfIntToInt = new HashMap<Integer,Integer>(2*_map10.size);
              for (int _i11 = 0; _i11 < _map10.size; ++_i11)
              {
                int _key12;
                int _val13;
                _key12 = iprot.readI32();
                _val13 = iprot.readI32();
                this.mapOfIntToInt.put(_key12, _val13);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mapStringToString != null) {
      oprot.writeFieldBegin(MAP_STRING_TO_STRING_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.mapStringToString.size()));
        for (Map.Entry<String, String> _iter14 : this.mapStringToString.entrySet())        {
          oprot.writeString(_iter14.getKey());
          oprot.writeString(_iter14.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.setOfStrings != null) {
      oprot.writeFieldBegin(SET_OF_STRINGS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.setOfStrings.size()));
        for (String _iter15 : this.setOfStrings)        {
          oprot.writeString(_iter15);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.listOfStrings != null) {
      oprot.writeFieldBegin(LIST_OF_STRINGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.listOfStrings.size()));
        for (String _iter16 : this.listOfStrings)        {
          oprot.writeString(_iter16);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.mapOfIntToInt != null) {
      oprot.writeFieldBegin(MAP_OF_INT_TO_INT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.I32, this.mapOfIntToInt.size()));
        for (Map.Entry<Integer, Integer> _iter17 : this.mapOfIntToInt.entrySet())        {
          oprot.writeI32(_iter17.getKey());
          oprot.writeI32(_iter17.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ObjectWithComplexTypes(");
    boolean first = true;

    sb.append("mapStringToString:");
    if (this.mapStringToString == null) {
      sb.append("null");
    } else {
      sb.append(this.mapStringToString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setOfStrings:");
    if (this.setOfStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.setOfStrings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listOfStrings:");
    if (this.listOfStrings == null) {
      sb.append("null");
    } else {
      sb.append(this.listOfStrings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapOfIntToInt:");
    if (this.mapOfIntToInt == null) {
      sb.append("null");
    } else {
      sb.append(this.mapOfIntToInt);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

