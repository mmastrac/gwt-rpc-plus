package com.dotspots.rpcplus.codegen.jscollections;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

/**
 * Generates a set of strongly-typed and generic GWT collections for use with Thrift.
 * 
 * It automatically handles translation of GWT longs to double pairs and back for hosted mode.
 */
public class CollectionGen {
	private static final Class<?>[] PRIMITIVE_CLASSES = new Class<?>[] { int.class, boolean.class, double.class, long.class, String.class };
	private final File outputDirectory;
	private final String packageName;

	public enum Type {
		LIST, SET, MAP
	}

	public CollectionGen(File outputDirectory, String packageName) {
		this.outputDirectory = outputDirectory;
		this.packageName = packageName;
	}

	public void generateCode() throws FileNotFoundException {
		writeList(Object.class);
		for (Class<?> clazz : PRIMITIVE_CLASSES) {
			writeList(clazz);
		}

		writeSet(int.class);
		writeSet(String.class);

		writeMap(int.class, Object.class);
		for (Class<?> clazz : PRIMITIVE_CLASSES) {
			writeMap(int.class, clazz);
		}

		writeMap(String.class, Object.class);
		for (Class<?> clazz : PRIMITIVE_CLASSES) {
			writeMap(String.class, clazz);
		}
	}

	private String getName(Class<?> clazz) {
		if (clazz == int.class) {
			return "Int";
		}

		if (clazz == boolean.class) {
			return "Bool";
		}

		if (clazz == double.class) {
			return "Double";
		}

		if (clazz == long.class) {
			return "Long";
		}

		if (clazz == String.class) {
			return "String";
		}

		return "";
	}

	private String getDefault(Class<?> clazz) {
		if (clazz == int.class || clazz == double.class) {
			return "0";
		}

		if (clazz == boolean.class) {
			return "false";
		}

		if (clazz == long.class) {
			return "[0,0]";
		}

		return "null";
	}

	private void writeList(Class<?> elem) throws FileNotFoundException {
		String name = "List";
		name += getName(elem);

		writeCollection(name, Type.LIST, int.class, elem);
	}

	private void writeSet(Class<?> elem) throws FileNotFoundException {
		String name = "Set";
		name += getName(elem);

		writeCollection(name, Type.SET, elem, null);
	}

	private void writeMap(Class<?> key, Class<?> value) throws FileNotFoundException {
		String name = "Map";
		name += getName(key);
		name += getName(value);

		writeCollection(name, Type.MAP, key, value);
	}

	private void writeCollection(String name, Type type, Class<?> key, Class<?> value) throws FileNotFoundException {
		final String fullName = "JsRpc" + name;
		File file = new File(outputDirectory, fullName + ".java");

		System.out.println(fullName);
		PrintWriter printWriter = new PrintWriter(file);

		boolean getter = (value != null);
		String genericsFull = (value == Object.class) ? "<E> " : "";
		String genericsShort = (value == Object.class) ? "<E>" : "";
		String valueType = (value == null || value == Object.class) ? "E" : value.getSimpleName();
		String keyType = (key == null || key == Object.class) ? "E" : key.getSimpleName();
		String indexer = (key == String.class) ? "['_' + idx]" : "[idx]";
		String keyString = (key == String.class) ? "'_' + idx" : "idx";
		String defaultValue = getDefault(value);

		try {
			printWriter.println("// AUTOGENERATED: See " + getClass().getName() + " for more details");
			printWriter.println("package " + packageName + ";");
			printWriter.println();

			printWriter.println("import com.google.gwt.core.client.JavaScriptObject;");
			printWriter.println("import com.google.gwt.core.client.GWT;");
			printWriter.println("import com.google.gwt.lang.LongLib;");
			printWriter.println();

			printWriter.println("@SuppressWarnings(\"unused\")");
			printWriter.println("public final class " + fullName + genericsFull.trim() + " extends JavaScriptObject {");
			printWriter.println("    protected " + fullName + "() {");
			printWriter.println("    }");
			printWriter.println();

			printWriter.println("    public static " + genericsFull + fullName + genericsShort + " create() {");
			if (type == Type.LIST) {
				printWriter.println("        return JavaScriptObject.createArray().cast();");
			} else {
				printWriter.println("        return JavaScriptObject.createObject().cast();");
			}
			printWriter.println("    }");
			printWriter.println();

			printWriter.println("    public native boolean contains(" + key.getSimpleName() + " idx) /*-{");
			printWriter.println("        return (" + keyString + " in this);");
			printWriter.println("    }-*/;");
			printWriter.println();

			if (type == Type.LIST) {
				printWriter.println("    public native int size() /*-{");
				printWriter.println("        return this.length;");
				printWriter.println("    }-*/;");
				printWriter.println();
				printWriter.println("    public native boolean isEmpty() /*-{");
				printWriter.println("        return !this.length;");
				printWriter.println("    }-*/;");
				printWriter.println();
				printWriter.println("    public native void remove(" + key.getSimpleName() + " idx) /*-{");
				printWriter.println("        this.splice(idx, 1);");
				printWriter.println("    }-*/;");
			} else {
				if (type == Type.MAP && (value == Object.class || value == String.class)) {
					printWriter.println("    public Iterable<" + valueType + "> keysIterable() {");
					printWriter.println("        return RpcUtils.<" + valueType + ">getMapIterable(this);");
					printWriter.println("    }");
					printWriter.println();
				}
				if (type == Type.SET && (key == Object.class || key == String.class)) {
					printWriter.println("    public Iterable<" + keyType + "> iterable() {");
					printWriter.println("        return RpcUtils.<" + keyType + ">getSetIterable(this);");
					printWriter.println("    }");
					printWriter.println();
				}
				printWriter.println("    /**");
				printWriter.println("     * Counts the size of a collection through brute force (slow).");
				printWriter.println("     */");
				printWriter.println("    public native int countSize() /*-{");
				printWriter.println("        var l = 0; for (x in this) if (this.hasOwnProperty(x)) l++; return l;");
				printWriter.println("    }-*/;");
				printWriter.println();
				printWriter.println("    public native boolean isEmpty() /*-{");
				printWriter.println("        for (x in this) if (this.hasOwnProperty(x)) return false; return true;");
				printWriter.println("    }-*/;");
				printWriter.println();
				printWriter.println("    public native void remove(" + key.getSimpleName() + " idx) /*-{");
				printWriter.println("        delete this" + indexer + ";");
				printWriter.println("    }-*/;");
			}
			printWriter.println();

			if (getter) {
				if (valueType.equals("long")) {
					printWriter.println("    public " + valueType + " get(" + key.getSimpleName() + " idx) {");
					printWriter.println("        return RpcUtils.fromDoubles(get0(idx));");
					printWriter.println("    };");
					printWriter.println();

					printWriter.println("    private native JavaScriptObject get0(" + key.getSimpleName() + " idx) /*-{");
					printWriter.println("        return this" + indexer + " || [0,0];");
					printWriter.println("    }-*/;");
				} else {
					printWriter.println("    public native " + valueType + " get(" + key.getSimpleName() + " idx) /*-{");
					if (valueType.equals("boolean")) {
						printWriter.println("        return !!this" + indexer + ";");
					} else {
						printWriter.println("        return this" + indexer + " || " + defaultValue + ";");
					}
					printWriter.println("    }-*/;");
				}
				printWriter.println();

				if (valueType.equals("long")) {
					printWriter.println("    public void set(" + key.getSimpleName() + " idx, " + valueType + " value) {");
					printWriter.println("        set0(idx, RpcUtils.toDoubles(value));");
					printWriter.println("    }");
					printWriter.println();

					printWriter.println("    private native void set0(" + key.getSimpleName() + " idx, JavaScriptObject value) /*-{");
					printWriter.println("        this" + indexer + " = value;");
					printWriter.println("    }-*/;");
				} else {
					printWriter.println("    public native void set(" + key.getSimpleName() + " idx, " + valueType + " value) /*-{");
					printWriter.println("        this" + indexer + " = value;");
					printWriter.println("    }-*/;");
				}
				printWriter.println();
			}

			if (type == Type.LIST) {
				if (valueType.equals("long")) {
					printWriter.println("    public void add(" + valueType + " value) {");
					printWriter.println("        add0(RpcUtils.toDoubles(value));");
					printWriter.println("    }");
					printWriter.println();

					printWriter.println("    public native void add0(JavaScriptObject value) /*-{");
					printWriter.println("        this.push(value);");
					printWriter.println("    }-*/;");
				} else {
					printWriter.println("    public native void add(" + valueType + " value) /*-{");
					printWriter.println("        this.push(value);");
					printWriter.println("    }-*/;");
				}
				printWriter.println();
			}
			if (type == Type.SET) {
				printWriter.println("    public native void add(" + key.getSimpleName() + " idx) /*-{");
				printWriter.println("        this" + indexer + " = 0;");
				printWriter.println("    }-*/;");
				printWriter.println();
			}

			printWriter.println("}");
		} finally {
			printWriter.close();
		}
	}

	public static void main(String[] args) throws FileNotFoundException {
		new CollectionGen(new File("/Users/matthew/Documents/workspace/gwt-rpc-plus/gwt/com/dotspots/rpcplus/client/jscollections"),
				"com.dotspots.rpcplus.client.jscollections").generateCode();
	}
}
