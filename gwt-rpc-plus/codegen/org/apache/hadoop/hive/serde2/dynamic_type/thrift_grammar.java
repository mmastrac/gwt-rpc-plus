/* Generated By:JJTree&JavaCC: Do not edit this line. thrift_grammar.java */
package org.apache.hadoop.hive.serde2.dynamic_type;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings("all")
public class thrift_grammar/* @bgen(jjtree) */implements thrift_grammarTreeConstants, thrift_grammarConstants {/*
																												 * @bgen(
																												 * jjtree
																												 * )
																												 */
	protected JJTthrift_grammarState jjtree = new JJTthrift_grammarState();
	private List<String> include_path = null;

	// for computing the autogenerated field ids in thrift
	private int field_val;

	private String lang;
	private String namespace;

	// store types and tables
	// separately because one cannot use a table (ie service.method) as a Struct like type.
	protected Map<String, DynamicSerDeSimpleNode> types;
	protected Map<String, DynamicSerDeSimpleNode> tables;
	protected Map<String, DynamicSerDeService> services;

	// system include path
	final private static String default_include_path[] = { "/usr/local/include", "/usr/include", "/usr/local/include/thrift/if",
			"/usr/local/include/fb303/if" };

	// need three params to differentiate between this and 2 param method auto generated since
	// some calls in the autogenerated code use null param for 2nd param and thus ambiguous.
	protected thrift_grammar(InputStream is, List<String> include_path, String lang) {
		this(is, null);
		this.types = new HashMap<String, DynamicSerDeSimpleNode>();
		this.tables = new HashMap<String, DynamicSerDeSimpleNode>();
		this.services = new HashMap<String, DynamicSerDeService>();
		this.include_path = include_path;
		this.field_val = -1;
		this.lang = lang;
	}

	// find the file on the include path
	private static File findFile(String fname, List<String> include_path) {
		for (String path : include_path) {
			final String full = path + "/" + fname;
			File f = new File(full);
			if (f.exists()) {
				return f;
			}
		}
		return null;
	}

	public static void main(String args[]) {
		String filename = null;
		List<String> include_path = new ArrayList<String>();

		for (String path : default_include_path) {
			include_path.add(path);
		}
		for (int i = 0; i < args.length; i++) {
			String arg = args[i];
			if (arg.equals("--include") && i + 1 < args.length) {
				include_path.add(args[++i]);
			}
			if (arg.equals("--file") && i + 1 < args.length) {
				filename = args[++i];
			}
		}

		InputStream is = System.in;
		if (filename != null) {
			try {
				is = new FileInputStream(findFile(filename, include_path));
			} catch (IOException e) {
			}
		}
		thrift_grammar t = new thrift_grammar(is, include_path, "");

		try {
			t.Start();
		} catch (Exception e) {
			System.out.println("Parse error.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}

	final public SimpleNode Start() throws ParseException {
		/* @bgen(jjtree) Start */
		DynamicSerDeStart jjtn000 = new DynamicSerDeStart(JJTSTART);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			HeaderList();
			label_1: while (true) {
				if (jj_2_1(2)) {
					CommaOrSemicolon();
				} else {
					;
				}
				Definition();
				if (jj_2_2(2)) {
					;
				} else {
					break label_1;
				}
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode HeaderList() throws ParseException {
		/* @bgen(jjtree) HeaderList */
		DynamicSerDeHeaderList jjtn000 = new DynamicSerDeHeaderList(JJTHEADERLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_2: while (true) {
				if (jj_2_3(2)) {
					;
				} else {
					break label_2;
				}
				Header();
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Header() throws ParseException {
		/* @bgen(jjtree) Header */
		DynamicSerDeHeader jjtn000 = new DynamicSerDeHeader(JJTHEADER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_4(2)) {
				Include();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_5(2)) {
				Namespace();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Namespace() throws ParseException {
		/* @bgen(jjtree) Namespace */
		DynamicSerDeNamespace jjtn000 = new DynamicSerDeNamespace(JJTNAMESPACE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_6(2)) {
				jj_consume_token(tok_namespace);
				jjtn000.lang = jj_consume_token(IDENTIFIER).image;
				jjtn000.namespace = jj_consume_token(IDENTIFIER).image;
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				// Set the current namespace
				if (jjtn000.lang.equals(lang)) {
					namespace = jjtn000.namespace;
				}
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_7(2)) {
				jj_consume_token(tok_cpp_namespace);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_8(2)) {
				jj_consume_token(tok_cpp_include);
				jj_consume_token(tok_literal);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_9(2)) {
				jj_consume_token(tok_php_namespace);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_10(2)) {
				jj_consume_token(tok_py_module);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_11(2)) {
				jj_consume_token(tok_perl_package);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_12(2)) {
				jj_consume_token(tok_ruby_namespace);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_13(2)) {
				jj_consume_token(tok_smalltalk_category);
				jj_consume_token(tok_st_identifier);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_14(2)) {
				jj_consume_token(tok_smalltalk_prefix);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_15(2)) {
				jj_consume_token(tok_java_package);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_16(2)) {
				jj_consume_token(tok_cocoa_prefix);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_17(2)) {
				jj_consume_token(tok_xsd_namespace);
				jj_consume_token(tok_literal);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_18(2)) {
				jj_consume_token(tok_csharp_namespace);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Include() throws ParseException {
		/* @bgen(jjtree) Include */
		DynamicSerDeInclude jjtn000 = new DynamicSerDeInclude(JJTINCLUDE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		String fname;
		boolean found = false;
		try {
			jj_consume_token(tok_include);
			fname = jj_consume_token(tok_literal).image;
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			// bugbug somewhat fragile below substring expression
			fname = fname.substring(1, fname.length() - 1);

			// try to find the file on the include path
			File f = thrift_grammar.findFile(fname, this.include_path);
			if (f != null) {
				found = true;
				try {
					FileInputStream fis = new FileInputStream(f);
					thrift_grammar t = new thrift_grammar(fis, this.include_path, lang);
					t.Start();
					fis.close();
					found = true;
					String prefix = f.getName().substring(0, f.getName().lastIndexOf('.'));
					// add in what we found to our type and table tables.
					for (Map.Entry<String, DynamicSerDeSimpleNode> entry : t.tables.entrySet()) {
						this.tables.put(prefix + '.' + entry.getKey(), entry.getValue());
					}
					for (Map.Entry<String, DynamicSerDeSimpleNode> entry : t.types.entrySet()) {
						this.types.put(prefix + '.' + entry.getKey(), entry.getValue());
					}
					for (Map.Entry<String, DynamicSerDeService> entry : t.services.entrySet()) {
						this.services.put(prefix + '.' + entry.getKey(), entry.getValue());
					}
				} catch (Exception e) {
					System.out.println("File: " + fname + " - Oops.");
					System.out.println(e.getMessage());
					e.printStackTrace();
				}
			}
			if (!found) {
				{
					if (true) {
						throw new RuntimeException("include file not found: " + fname);
					}
				}
			}
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Definition() throws ParseException {
		/* @bgen(jjtree) Definition */
		DynamicSerDeDefinition jjtn000 = new DynamicSerDeDefinition(JJTDEFINITION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_19(2)) {
				Const();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_20(2)) {
				Service();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_21(2)) {
				TypeDefinition();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode TypeDefinition() throws ParseException {
		/* @bgen(jjtree) TypeDefinition */
		DynamicSerDeTypeDefinition jjtn000 = new DynamicSerDeTypeDefinition(JJTTYPEDEFINITION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_22(2)) {
				Typedef();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_23(2)) {
				Enum();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_24(2)) {
				Senum();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_25(2)) {
				Struct();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_26(2)) {
				Xception();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypedef Typedef() throws ParseException {
		/* @bgen(jjtree) Typedef */
		DynamicSerDeTypedef jjtn000 = new DynamicSerDeTypedef(JJTTYPEDEF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_typedef);
			DefinitionType();
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			// store the type for later retrieval
			jjtn000.namespace = namespace;
			this.types.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	// returning void because we ignore this production.
	final public void CommaOrSemicolon() throws ParseException {
		/* @bgen(jjtree) CommaOrSemicolon */
		DynamicSerDeCommaOrSemicolon jjtn000 = new DynamicSerDeCommaOrSemicolon(JJTCOMMAORSEMICOLON);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_27(2)) {
				jj_consume_token(60);
			} else if (jj_2_28(2)) {
				jj_consume_token(61);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public SimpleNode Enum() throws ParseException {
		/* @bgen(jjtree) Enum */
		DynamicSerDeEnum jjtn000 = new DynamicSerDeEnum(JJTENUM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		this.field_val = 0;
		try {
			jj_consume_token(tok_enum);
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			jj_consume_token(62);
			EnumDefList();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.namespace = namespace;
			this.types.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode EnumDefList() throws ParseException {
		/* @bgen(jjtree) EnumDefList */
		DynamicSerDeEnumDefList jjtn000 = new DynamicSerDeEnumDefList(JJTENUMDEFLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_3: while (true) {
				EnumDef();
				if (jj_2_29(2)) {
					;
				} else {
					break label_3;
				}
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode EnumDef() throws ParseException {
		/* @bgen(jjtree) EnumDef */
		DynamicSerDeEnumDef jjtn000 = new DynamicSerDeEnumDef(JJTENUMDEF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			if (jj_2_30(2)) {
				jj_consume_token(64);
				jjtn000.value = jj_consume_token(tok_int_constant).image;
			} else {
				;
			}
			if (jj_2_31(2)) {
				CommaOrSemicolon();
			} else {
				;
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			if (jjtn000.value == null) {
				jjtn000.value = Integer.toString(this.field_val++);
			}
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Senum() throws ParseException {
		/* @bgen(jjtree) Senum */
		DynamicSerDeSenum jjtn000 = new DynamicSerDeSenum(JJTSENUM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_senum);
			jj_consume_token(IDENTIFIER);
			jj_consume_token(62);
			SenumDefList();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode SenumDefList() throws ParseException {
		/* @bgen(jjtree) SenumDefList */
		DynamicSerDeSenumDefList jjtn000 = new DynamicSerDeSenumDefList(JJTSENUMDEFLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_4: while (true) {
				SenumDef();
				if (jj_2_32(2)) {
					;
				} else {
					break label_4;
				}
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode SenumDef() throws ParseException {
		/* @bgen(jjtree) SenumDef */
		DynamicSerDeSenumDef jjtn000 = new DynamicSerDeSenumDef(JJTSENUMDEF);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_literal);
			if (jj_2_33(2)) {
				CommaOrSemicolon();
			} else {
				;
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Const() throws ParseException {
		/* @bgen(jjtree) Const */
		DynamicSerDeConst jjtn000 = new DynamicSerDeConst(JJTCONST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_const);
			FieldType();
			jj_consume_token(IDENTIFIER);
			jj_consume_token(64);
			ConstValue();
			if (jj_2_34(2)) {
				CommaOrSemicolon();
			} else {
				;
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode ConstValue() throws ParseException {
		/* @bgen(jjtree) ConstValue */
		DynamicSerDeConstValue jjtn000 = new DynamicSerDeConstValue(JJTCONSTVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_35(2)) {
				jj_consume_token(tok_int_constant);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else if (jj_2_36(2)) {
				jj_consume_token(tok_double_constant);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else if (jj_2_37(2)) {
				jj_consume_token(tok_literal);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else if (jj_2_38(2)) {
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else if (jj_2_39(2)) {
				ConstList();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else if (jj_2_40(2)) {
				ConstMap();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode ConstList() throws ParseException {
		/* @bgen(jjtree) ConstList */
		DynamicSerDeConstList jjtn000 = new DynamicSerDeConstList(JJTCONSTLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(65);
			ConstListContents();
			jj_consume_token(66);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode ConstListContents() throws ParseException {
		/* @bgen(jjtree) ConstListContents */
		DynamicSerDeConstListContents jjtn000 = new DynamicSerDeConstListContents(JJTCONSTLISTCONTENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			label_5: while (true) {
				ConstValue();
				if (jj_2_41(2)) {
					CommaOrSemicolon();
				} else {
					;
				}
				if (jj_2_42(2)) {
					;
				} else {
					break label_5;
				}
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode ConstMap() throws ParseException {
		/* @bgen(jjtree) ConstMap */
		DynamicSerDeConstMap jjtn000 = new DynamicSerDeConstMap(JJTCONSTMAP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(62);
			ConstMapContents();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode ConstMapContents() throws ParseException {
		/* @bgen(jjtree) ConstMapContents */
		DynamicSerDeConstMapContents jjtn000 = new DynamicSerDeConstMapContents(JJTCONSTMAPCONTENTS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_45(2)) {
				label_6: while (true) {
					ConstValue();
					jj_consume_token(67);
					ConstValue();
					if (jj_2_43(2)) {
						CommaOrSemicolon();
					} else {
						;
					}
					if (jj_2_44(2)) {
						;
					} else {
						break label_6;
					}
				}
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeStruct Struct() throws ParseException {
		/* @bgen(jjtree) Struct */
		DynamicSerDeStruct jjtn000 = new DynamicSerDeStruct(JJTSTRUCT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_struct);
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			jj_consume_token(62);
			FieldList();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.namespace = namespace;
			this.types.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Xception() throws ParseException {
		/* @bgen(jjtree) Xception */
		DynamicSerDeXception jjtn000 = new DynamicSerDeXception(JJTXCEPTION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_exception);
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			jj_consume_token(62);
			FieldList();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.namespace = namespace;
			this.types.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeService Service() throws ParseException {
		/* @bgen(jjtree) Service */
		DynamicSerDeService jjtn000 = new DynamicSerDeService(JJTSERVICE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_service);
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			Extends();
			jj_consume_token(62);
			FlagArgs();
			label_7: while (true) {
				Function();
				if (jj_2_46(2)) {
					;
				} else {
					break label_7;
				}
			}
			UnflagArgs();
			jj_consume_token(63);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			// at some point, these should be inserted as a "db"
			jjtn000.namespace = namespace;
			this.services.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode FlagArgs() throws ParseException {
		/* @bgen(jjtree) FlagArgs */
		DynamicSerDeFlagArgs jjtn000 = new DynamicSerDeFlagArgs(JJTFLAGARGS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode UnflagArgs() throws ParseException {
		/* @bgen(jjtree) UnflagArgs */
		DynamicSerDeUnflagArgs jjtn000 = new DynamicSerDeUnflagArgs(JJTUNFLAGARGS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode Extends() throws ParseException {
		/* @bgen(jjtree) Extends */
		DynamicSerDeExtends jjtn000 = new DynamicSerDeExtends(JJTEXTENDS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_47(2)) {
				jj_consume_token(tok_extends);
				jj_consume_token(IDENTIFIER);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeFunction Function() throws ParseException {
		/* @bgen(jjtree) Function */
		DynamicSerDeFunction jjtn000 = new DynamicSerDeFunction(JJTFUNCTION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Async();
			jjtn000.type = FunctionType();
			// the name of the function/table
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			jj_consume_token(68);
			FieldList();
			jj_consume_token(69);
			jjtn000.exceptions = Throws();
			if (jj_2_48(2)) {
				CommaOrSemicolon();
			} else {
				;
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.namespace = namespace;
			this.tables.put(jjtn000.name, jjtn000);
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public void Async() throws ParseException {
		/* @bgen(jjtree) Async */
		DynamicSerDeAsync jjtn000 = new DynamicSerDeAsync(JJTASYNC);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_49(2)) {
				jj_consume_token(tok_async);
			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;

			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public DynamicSerDeFieldList Throws() throws ParseException {
		/* @bgen(jjtree) Throws */
		DynamicSerDeThrows jjtn000 = new DynamicSerDeThrows(JJTTHROWS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		DynamicSerDeFieldList exceptions;
		try {
			if (jj_2_50(2)) {
				jj_consume_token(tok_throws);
				jj_consume_token(68);
				exceptions = FieldList();
				jj_consume_token(69);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return exceptions;
					}
				}
			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return null;
					}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	// nothing special - just use the DynamicSerDeFieldList's children methods to access the fields
	final public DynamicSerDeFieldList FieldList() throws ParseException {
		/* @bgen(jjtree) FieldList */
		DynamicSerDeFieldList jjtn000 = new DynamicSerDeFieldList(JJTFIELDLIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		this.field_val = -1;
		try {
			label_8: while (true) {
				if (jj_2_51(2)) {
					;
				} else {
					break label_8;
				}
				Field();
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeField Field() throws ParseException {
		/* @bgen(jjtree) Field */
		DynamicSerDeField jjtn000 = new DynamicSerDeField(JJTFIELD);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		String fidnum = "";
		String fid;
		try {
			if (jj_2_52(2)) {
				fidnum = jj_consume_token(tok_int_constant).image;
				jj_consume_token(67);
			} else {
				;
			}
			FieldRequiredness();
			FieldType();
			// the name of the field - not optional
			jjtn000.name = jj_consume_token(IDENTIFIER).image;
			FieldValue();
			if (jj_2_53(2)) {
				CommaOrSemicolon();
			} else {
				;
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			if (fidnum.length() > 0) {
				int fidInt = Integer.valueOf(fidnum);
				jjtn000.fieldid = fidInt;
			} else {
				jjtn000.fieldid = this.field_val--;
			}
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeFieldRequiredness FieldRequiredness() throws ParseException {
		/* @bgen(jjtree) FieldRequiredness */
		DynamicSerDeFieldRequiredness jjtn000 = new DynamicSerDeFieldRequiredness(JJTFIELDREQUIREDNESS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_54(2)) {
				jj_consume_token(tok_required);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.requiredness = DynamicSerDeFieldRequiredness.RequirednessTypes.Required;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_55(2)) {
				jj_consume_token(tok_optional);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.requiredness = DynamicSerDeFieldRequiredness.RequirednessTypes.Optional;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_56(2)) {
				jj_consume_token(tok_skip);
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.requiredness = DynamicSerDeFieldRequiredness.RequirednessTypes.Skippable;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode FieldValue() throws ParseException {
		/* @bgen(jjtree) FieldValue */
		DynamicSerDeFieldValue jjtn000 = new DynamicSerDeFieldValue(JJTFIELDVALUE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_57(2)) {
				jj_consume_token(64);
				ConstValue();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public SimpleNode DefinitionType() throws ParseException {
		/* @bgen(jjtree) DefinitionType */
		DynamicSerDeDefinitionType jjtn000 = new DynamicSerDeDefinitionType(JJTDEFINITIONTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_58(2)) {
				TypeString();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_59(2)) {
				TypeBool();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_60(2)) {
				Typei16();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_61(2)) {
				Typei32();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_62(2)) {
				Typei64();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_63(2)) {
				TypeDouble();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_64(2)) {
				TypeMap();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_65(2)) {
				TypeSet();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_66(2)) {
				TypeList();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeFunctionType FunctionType() throws ParseException {
		/* @bgen(jjtree) FunctionType */
		DynamicSerDeFunctionType jjtn000 = new DynamicSerDeFunctionType(JJTFUNCTIONTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_67(2)) {
				jjtn000.type = FieldType();
			} else if (jj_2_68(2)) {
				jj_consume_token(tok_void);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeFieldType FieldType() throws ParseException {
		/* @bgen(jjtree) FieldType */
		DynamicSerDeFieldType jjtn000 = new DynamicSerDeFieldType(JJTFIELDTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			if (jj_2_69(2)) {
				TypeString();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_70(2)) {
				TypeBinary();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_71(2)) {
				TypeBool();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_72(2)) {
				Typei16();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_73(2)) {
				Typei32();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_74(2)) {
				Typei64();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_75(2)) {
				TypeDouble();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_76(2)) {
				TypeMap();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_77(2)) {
				TypeSet();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_78(2)) {
				TypeList();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				{
					if (true) {
						return jjtn000;
					}
				}
			} else if (jj_2_79(2)) {
				jjtn000.name = jj_consume_token(IDENTIFIER).image;
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				if (this.types.get(jjtn000.name) == null) {
					System.err.println("ERROR: DDL specifying type " + jjtn000.name + " which has not been defined");
					{
						if (true) {
							throw new RuntimeException("specifying type " + jjtn000.name + " which has not been defined");
						}
					}
				}
				// lookup the specified type and set this nodes type to it. Precludes forward and self references for
				// now.
				jjtn000.jjtAddChild(this.types.get(jjtn000.name), 0);
				{
					if (true) {
						return jjtn000;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeString TypeString() throws ParseException {
		/* @bgen(jjtree) TypeString */
		DynamicSerDeTypeString jjtn000 = new DynamicSerDeTypeString(JJTTYPESTRING);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_string);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeByte TypeByte() throws ParseException {
		/* @bgen(jjtree) TypeByte */
		DynamicSerDeTypeByte jjtn000 = new DynamicSerDeTypeByte(JJTTYPEBYTE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_byte);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypei16 Typei16() throws ParseException {
		/* @bgen(jjtree) Typei16 */
		DynamicSerDeTypei16 jjtn000 = new DynamicSerDeTypei16(JJTTYPEI16);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_i16);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypei32 Typei32() throws ParseException {
		/* @bgen(jjtree) Typei32 */
		DynamicSerDeTypei32 jjtn000 = new DynamicSerDeTypei32(JJTTYPEI32);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_i32);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypei64 Typei64() throws ParseException {
		/* @bgen(jjtree) Typei64 */
		DynamicSerDeTypei64 jjtn000 = new DynamicSerDeTypei64(JJTTYPEI64);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_i64);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeDouble TypeDouble() throws ParseException {
		/* @bgen(jjtree) TypeDouble */
		DynamicSerDeTypeDouble jjtn000 = new DynamicSerDeTypeDouble(JJTTYPEDOUBLE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_double);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeBinary TypeBinary() throws ParseException {
		/* @bgen(jjtree) TypeBinary */
		DynamicSerDeTypeBinary jjtn000 = new DynamicSerDeTypeBinary(JJTTYPEBINARY);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_binary);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeBool TypeBool() throws ParseException {
		/* @bgen(jjtree) TypeBool */
		DynamicSerDeTypeBool jjtn000 = new DynamicSerDeTypeBool(JJTTYPEBOOL);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_bool);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeMap TypeMap() throws ParseException {
		/* @bgen(jjtree) TypeMap */
		DynamicSerDeTypeMap jjtn000 = new DynamicSerDeTypeMap(JJTTYPEMAP);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_map);
			jj_consume_token(70);
			FieldType();
			jj_consume_token(60);
			FieldType();
			jj_consume_token(71);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeSet TypeSet() throws ParseException {
		/* @bgen(jjtree) TypeSet */
		DynamicSerDeTypeSet jjtn000 = new DynamicSerDeTypeSet(JJTTYPESET);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_set);
			jj_consume_token(70);
			FieldType();
			jj_consume_token(71);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public DynamicSerDeTypeList TypeList() throws ParseException {
		/* @bgen(jjtree) TypeList */
		DynamicSerDeTypeList jjtn000 = new DynamicSerDeTypeList(JJTTYPELIST);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(tok_list);
			jj_consume_token(70);
			FieldType();
			jj_consume_token(71);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true) {
					return jjtn000;
				}
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true) {
						throw (RuntimeException) jjte000;
					}
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true) {
						throw (ParseException) jjte000;
					}
				}
			}
			{
				if (true) {
					throw (Error) jjte000;
				}
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(17, xla);
		}
	}

	private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(18, xla);
		}
	}

	private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(19, xla);
		}
	}

	private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(20, xla);
		}
	}

	private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(21, xla);
		}
	}

	private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_23();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(22, xla);
		}
	}

	private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_24();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(23, xla);
		}
	}

	private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_25();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(24, xla);
		}
	}

	private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_26();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(25, xla);
		}
	}

	private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_27();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(26, xla);
		}
	}

	private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_28();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(27, xla);
		}
	}

	private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_29();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(28, xla);
		}
	}

	private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_30();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(29, xla);
		}
	}

	private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_31();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(30, xla);
		}
	}

	private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_32();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(31, xla);
		}
	}

	private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_33();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(32, xla);
		}
	}

	private boolean jj_2_34(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_34();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(33, xla);
		}
	}

	private boolean jj_2_35(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_35();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(34, xla);
		}
	}

	private boolean jj_2_36(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_36();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(35, xla);
		}
	}

	private boolean jj_2_37(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_37();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(36, xla);
		}
	}

	private boolean jj_2_38(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_38();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(37, xla);
		}
	}

	private boolean jj_2_39(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_39();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(38, xla);
		}
	}

	private boolean jj_2_40(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_40();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(39, xla);
		}
	}

	private boolean jj_2_41(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_41();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(40, xla);
		}
	}

	private boolean jj_2_42(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_42();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(41, xla);
		}
	}

	private boolean jj_2_43(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_43();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(42, xla);
		}
	}

	private boolean jj_2_44(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_44();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(43, xla);
		}
	}

	private boolean jj_2_45(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_45();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(44, xla);
		}
	}

	private boolean jj_2_46(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_46();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(45, xla);
		}
	}

	private boolean jj_2_47(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_47();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(46, xla);
		}
	}

	private boolean jj_2_48(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_48();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(47, xla);
		}
	}

	private boolean jj_2_49(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_49();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(48, xla);
		}
	}

	private boolean jj_2_50(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_50();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(49, xla);
		}
	}

	private boolean jj_2_51(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_51();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(50, xla);
		}
	}

	private boolean jj_2_52(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_52();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(51, xla);
		}
	}

	private boolean jj_2_53(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_53();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(52, xla);
		}
	}

	private boolean jj_2_54(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_54();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(53, xla);
		}
	}

	private boolean jj_2_55(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_55();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(54, xla);
		}
	}

	private boolean jj_2_56(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_56();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(55, xla);
		}
	}

	private boolean jj_2_57(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_57();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(56, xla);
		}
	}

	private boolean jj_2_58(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_58();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(57, xla);
		}
	}

	private boolean jj_2_59(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_59();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(58, xla);
		}
	}

	private boolean jj_2_60(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_60();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(59, xla);
		}
	}

	private boolean jj_2_61(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_61();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(60, xla);
		}
	}

	private boolean jj_2_62(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_62();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(61, xla);
		}
	}

	private boolean jj_2_63(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_63();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(62, xla);
		}
	}

	private boolean jj_2_64(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_64();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(63, xla);
		}
	}

	private boolean jj_2_65(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_65();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(64, xla);
		}
	}

	private boolean jj_2_66(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_66();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(65, xla);
		}
	}

	private boolean jj_2_67(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_67();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(66, xla);
		}
	}

	private boolean jj_2_68(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_68();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(67, xla);
		}
	}

	private boolean jj_2_69(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_69();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(68, xla);
		}
	}

	private boolean jj_2_70(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_70();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(69, xla);
		}
	}

	private boolean jj_2_71(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_71();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(70, xla);
		}
	}

	private boolean jj_2_72(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_72();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(71, xla);
		}
	}

	private boolean jj_2_73(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_73();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(72, xla);
		}
	}

	private boolean jj_2_74(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_74();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(73, xla);
		}
	}

	private boolean jj_2_75(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_75();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(74, xla);
		}
	}

	private boolean jj_2_76(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_76();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(75, xla);
		}
	}

	private boolean jj_2_77(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_77();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(76, xla);
		}
	}

	private boolean jj_2_78(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_78();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(77, xla);
		}
	}

	private boolean jj_2_79(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_79();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(78, xla);
		}
	}

	private boolean jj_3_67() {
		if (jj_3R_38()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_68() {
		if (jj_scan_token(tok_void)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_44() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_67()) {
			jj_scanpos = xsp;
			if (jj_3_68()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3R_17() {
		if (jj_scan_token(tok_typedef)) {
			return true;
		}
		if (jj_3R_40()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_66() {
		if (jj_3R_37()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_46() {
		if (jj_3R_27()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_65() {
		if (jj_3R_36()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_26() {
		if (jj_3R_21()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_64() {
		if (jj_3R_35()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_25() {
		if (jj_3R_20()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_15() {
		if (jj_scan_token(tok_service)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_63() {
		if (jj_3R_34()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_24() {
		if (jj_3R_19()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_62() {
		if (jj_3R_33()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_23() {
		if (jj_3R_18()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_43() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_61() {
		if (jj_3R_32()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_37() {
		if (jj_scan_token(tok_list)) {
			return true;
		}
		if (jj_scan_token(70)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_16() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_22()) {
			jj_scanpos = xsp;
			if (jj_3_23()) {
				jj_scanpos = xsp;
				if (jj_3_24()) {
					jj_scanpos = xsp;
					if (jj_3_25()) {
						jj_scanpos = xsp;
						if (jj_3_26()) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_22() {
		if (jj_3R_17()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_21() {
		if (jj_scan_token(tok_exception)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_60() {
		if (jj_3R_31()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_59() {
		if (jj_3R_30()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_21() {
		if (jj_3R_16()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_58() {
		if (jj_3R_29()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_40() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_58()) {
			jj_scanpos = xsp;
			if (jj_3_59()) {
				jj_scanpos = xsp;
				if (jj_3_60()) {
					jj_scanpos = xsp;
					if (jj_3_61()) {
						jj_scanpos = xsp;
						if (jj_3_62()) {
							jj_scanpos = xsp;
							if (jj_3_63()) {
								jj_scanpos = xsp;
								if (jj_3_64()) {
									jj_scanpos = xsp;
									if (jj_3_65()) {
										jj_scanpos = xsp;
										if (jj_3_66()) {
											return true;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_20() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_36() {
		if (jj_scan_token(tok_set)) {
			return true;
		}
		if (jj_scan_token(70)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_10() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_19()) {
			jj_scanpos = xsp;
			if (jj_3_20()) {
				jj_scanpos = xsp;
				if (jj_3_21()) {
					return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3_19() {
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_20() {
		if (jj_scan_token(tok_struct)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_46() {
		return false;
	}

	private boolean jj_3_57() {
		if (jj_scan_token(64)) {
			return true;
		}
		if (jj_3R_26()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_scan_token(tok_map)) {
			return true;
		}
		if (jj_scan_token(70)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_44() {
		if (jj_3R_26()) {
			return true;
		}
		if (jj_scan_token(67)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_42() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_45()) {
			jj_scanpos = xsp;
			if (jj_3R_46()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3_34() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_45() {
		Token xsp;
		if (jj_3_44()) {
			return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_44()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_48() {
		return false;
	}

	private boolean jj_3_41() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_30() {
		if (jj_scan_token(tok_bool)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_25() {
		if (jj_scan_token(62)) {
			return true;
		}
		if (jj_3R_42()) {
			return true;
		}
		if (jj_scan_token(63)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_31() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_56() {
		if (jj_scan_token(tok_skip)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_39() {
		if (jj_scan_token(tok_binary)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_55() {
		if (jj_scan_token(tok_optional)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_42() {
		if (jj_3R_26()) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_41()) {
			jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3R_41() {
		Token xsp;
		if (jj_3_42()) {
			return true;
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_42()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_45() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_54()) {
			jj_scanpos = xsp;
			if (jj_3_55()) {
				jj_scanpos = xsp;
				if (jj_3_56()) {
					jj_scanpos = xsp;
					if (jj_3R_48()) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_54() {
		if (jj_scan_token(tok_required)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_34() {
		if (jj_scan_token(tok_double)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_24() {
		if (jj_scan_token(65)) {
			return true;
		}
		if (jj_3R_41()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_12() {
		if (jj_scan_token(tok_include)) {
			return true;
		}
		if (jj_scan_token(tok_literal)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_33() {
		if (jj_scan_token(tok_i64)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_40() {
		if (jj_3R_25()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_53() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_39() {
		if (jj_3R_24()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_32() {
		if (jj_scan_token(tok_i32)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_38() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_18() {
		if (jj_scan_token(tok_csharp_namespace)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_37() {
		if (jj_scan_token(tok_literal)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_31() {
		if (jj_scan_token(tok_i16)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_36() {
		if (jj_scan_token(tok_double_constant)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_17() {
		if (jj_scan_token(tok_xsd_namespace)) {
			return true;
		}
		if (jj_scan_token(tok_literal)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_26() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_35()) {
			jj_scanpos = xsp;
			if (jj_3_36()) {
				jj_scanpos = xsp;
				if (jj_3_37()) {
					jj_scanpos = xsp;
					if (jj_3_38()) {
						jj_scanpos = xsp;
						if (jj_3_39()) {
							jj_scanpos = xsp;
							if (jj_3_40()) {
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_35() {
		if (jj_scan_token(tok_int_constant)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_33() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_52() {
		if (jj_scan_token(tok_int_constant)) {
			return true;
		}
		if (jj_scan_token(67)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_16() {
		if (jj_scan_token(tok_cocoa_prefix)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_28() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_52()) {
			jj_scanpos = xsp;
		}
		if (jj_3R_45()) {
			return true;
		}
		if (jj_3R_38()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_14() {
		if (jj_scan_token(tok_const)) {
			return true;
		}
		if (jj_3R_38()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_15() {
		if (jj_scan_token(tok_java_package)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_30() {
		if (jj_scan_token(64)) {
			return true;
		}
		if (jj_scan_token(tok_int_constant)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_14() {
		if (jj_scan_token(tok_smalltalk_prefix)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_29() {
		if (jj_scan_token(tok_string)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_51() {
		if (jj_3R_28()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_23() {
		if (jj_scan_token(tok_literal)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_33()) {
			jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3_13() {
		if (jj_scan_token(tok_smalltalk_category)) {
			return true;
		}
		if (jj_scan_token(tok_st_identifier)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_12() {
		if (jj_scan_token(tok_ruby_namespace)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_32() {
		if (jj_3R_23()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_11() {
		if (jj_scan_token(tok_perl_package)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_50() {
		if (jj_scan_token(tok_throws)) {
			return true;
		}
		if (jj_scan_token(68)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_79() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_19() {
		if (jj_scan_token(tok_senum)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_10() {
		if (jj_scan_token(tok_py_module)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_78() {
		if (jj_3R_37()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_47() {
		return false;
	}

	private boolean jj_3R_43() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_49()) {
			jj_scanpos = xsp;
			if (jj_3R_47()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3_49() {
		if (jj_scan_token(tok_async)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_9() {
		if (jj_scan_token(tok_php_namespace)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_77() {
		if (jj_3R_36()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_22() {
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_30()) {
			jj_scanpos = xsp;
		}
		xsp = jj_scanpos;
		if (jj_3_31()) {
			jj_scanpos = xsp;
		}
		return false;
	}

	private boolean jj_3_8() {
		if (jj_scan_token(tok_cpp_include)) {
			return true;
		}
		if (jj_scan_token(tok_literal)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_76() {
		if (jj_3R_35()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_48() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_7() {
		if (jj_scan_token(tok_cpp_namespace)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_75() {
		if (jj_3R_34()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_29() {
		if (jj_3R_22()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_13() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_6()) {
			jj_scanpos = xsp;
			if (jj_3_7()) {
				jj_scanpos = xsp;
				if (jj_3_8()) {
					jj_scanpos = xsp;
					if (jj_3_9()) {
						jj_scanpos = xsp;
						if (jj_3_10()) {
							jj_scanpos = xsp;
							if (jj_3_11()) {
								jj_scanpos = xsp;
								if (jj_3_12()) {
									jj_scanpos = xsp;
									if (jj_3_13()) {
										jj_scanpos = xsp;
										if (jj_3_14()) {
											jj_scanpos = xsp;
											if (jj_3_15()) {
												jj_scanpos = xsp;
												if (jj_3_16()) {
													jj_scanpos = xsp;
													if (jj_3_17()) {
														jj_scanpos = xsp;
														if (jj_3_18()) {
															return true;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3_74() {
		if (jj_3R_33()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_6() {
		if (jj_scan_token(tok_namespace)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_27() {
		if (jj_3R_43()) {
			return true;
		}
		if (jj_3R_44()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_73() {
		if (jj_3R_32()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_72() {
		if (jj_3R_31()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_13()) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_18() {
		if (jj_scan_token(tok_enum)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_11() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3_5()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_12()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_71() {
		if (jj_3R_30()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_2() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_1()) {
			jj_scanpos = xsp;
		}
		if (jj_3R_10()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_70() {
		if (jj_3R_39()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_47() {
		if (jj_scan_token(tok_extends)) {
			return true;
		}
		if (jj_scan_token(IDENTIFIER)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_28() {
		if (jj_scan_token(61)) {
			return true;
		}
		return false;
	}

	private boolean jj_3R_38() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_69()) {
			jj_scanpos = xsp;
			if (jj_3_70()) {
				jj_scanpos = xsp;
				if (jj_3_71()) {
					jj_scanpos = xsp;
					if (jj_3_72()) {
						jj_scanpos = xsp;
						if (jj_3_73()) {
							jj_scanpos = xsp;
							if (jj_3_74()) {
								jj_scanpos = xsp;
								if (jj_3_75()) {
									jj_scanpos = xsp;
									if (jj_3_76()) {
										jj_scanpos = xsp;
										if (jj_3_77()) {
											jj_scanpos = xsp;
											if (jj_3_78()) {
												jj_scanpos = xsp;
												if (jj_3_79()) {
													return true;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_27()) {
			jj_scanpos = xsp;
			if (jj_3_28()) {
				return true;
			}
		}
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_11()) {
			return true;
		}
		return false;
	}

	private boolean jj_3_27() {
		if (jj_scan_token(60)) {
			return true;
		}
		return false;
	}

	private boolean jj_3_69() {
		if (jj_3R_29()) {
			return true;
		}
		return false;
	}

	/** Generated Token Manager. */
	public thrift_grammarTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] {};
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[] {};
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[79];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public thrift_grammar(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public thrift_grammar(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new thrift_grammarTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor. */
	public thrift_grammar(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new thrift_grammarTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor with generated Token Manager. */
	public thrift_grammar(thrift_grammarTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(thrift_grammarTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) {
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null) {
				jj_add_error_token(kind, i);
			}
		}
		if (jj_scanpos.kind != kind) {
			return true;
		}
		if (jj_la == 0 && jj_scanpos == jj_lastpos) {
			throw jj_ls;
		}
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = token_source.getNextToken();
			}
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null) {
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		} else {
			return (jj_ntk = jj_nt.kind);
		}
	}

	private java.util.List jj_expentries = new java.util.ArrayList();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) {
			return;
		}
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) {
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[72];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 72; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 79; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						case 16:
							jj_3_17();
							break;
						case 17:
							jj_3_18();
							break;
						case 18:
							jj_3_19();
							break;
						case 19:
							jj_3_20();
							break;
						case 20:
							jj_3_21();
							break;
						case 21:
							jj_3_22();
							break;
						case 22:
							jj_3_23();
							break;
						case 23:
							jj_3_24();
							break;
						case 24:
							jj_3_25();
							break;
						case 25:
							jj_3_26();
							break;
						case 26:
							jj_3_27();
							break;
						case 27:
							jj_3_28();
							break;
						case 28:
							jj_3_29();
							break;
						case 29:
							jj_3_30();
							break;
						case 30:
							jj_3_31();
							break;
						case 31:
							jj_3_32();
							break;
						case 32:
							jj_3_33();
							break;
						case 33:
							jj_3_34();
							break;
						case 34:
							jj_3_35();
							break;
						case 35:
							jj_3_36();
							break;
						case 36:
							jj_3_37();
							break;
						case 37:
							jj_3_38();
							break;
						case 38:
							jj_3_39();
							break;
						case 39:
							jj_3_40();
							break;
						case 40:
							jj_3_41();
							break;
						case 41:
							jj_3_42();
							break;
						case 42:
							jj_3_43();
							break;
						case 43:
							jj_3_44();
							break;
						case 44:
							jj_3_45();
							break;
						case 45:
							jj_3_46();
							break;
						case 46:
							jj_3_47();
							break;
						case 47:
							jj_3_48();
							break;
						case 48:
							jj_3_49();
							break;
						case 49:
							jj_3_50();
							break;
						case 50:
							jj_3_51();
							break;
						case 51:
							jj_3_52();
							break;
						case 52:
							jj_3_53();
							break;
						case 53:
							jj_3_54();
							break;
						case 54:
							jj_3_55();
							break;
						case 55:
							jj_3_56();
							break;
						case 56:
							jj_3_57();
							break;
						case 57:
							jj_3_58();
							break;
						case 58:
							jj_3_59();
							break;
						case 59:
							jj_3_60();
							break;
						case 60:
							jj_3_61();
							break;
						case 61:
							jj_3_62();
							break;
						case 62:
							jj_3_63();
							break;
						case 63:
							jj_3_64();
							break;
						case 64:
							jj_3_65();
							break;
						case 65:
							jj_3_66();
							break;
						case 66:
							jj_3_67();
							break;
						case 67:
							jj_3_68();
							break;
						case 68:
							jj_3_69();
							break;
						case 69:
							jj_3_70();
							break;
						case 70:
							jj_3_71();
							break;
						case 71:
							jj_3_72();
							break;
						case 72:
							jj_3_73();
							break;
						case 73:
							jj_3_74();
							break;
						case 74:
							jj_3_75();
							break;
						case 75:
							jj_3_76();
							break;
						case 76:
							jj_3_77();
							break;
						case 77:
							jj_3_78();
							break;
						case 78:
							jj_3_79();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
